"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseCloudCodePublisher = void 0;

var _ParsePubSub = require("./ParsePubSub");

var _node = _interopRequireDefault(require("parse/node"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseCloudCodePublisher {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.parsePublisher = _ParsePubSub.ParsePubSub.createPublisher(config);
  }

  onCloudCodeAfterSave(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterSave', request);
  }

  onCloudCodeAfterDelete(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterDelete', request);
  } // Request is the request object from cloud code functions. request.object is a ParseObject.


  _onCloudCodeMessage(type, request) {
    _logger.default.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original); // We need the full JSON which includes className


    const message = {
      currentParseObject: request.object._toFullJSON()
    };

    if (request.original) {
      message.originalParseObject = request.original._toFullJSON();
    }

    this.parsePublisher.publish(type, JSON.stringify(message));
  }

}

exports.ParseCloudCodePublisher = ParseCloudCodePublisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicGFyc2VQdWJsaXNoZXIiLCJQYXJzZVB1YlN1YiIsImNyZWF0ZVB1Ymxpc2hlciIsIm9uQ2xvdWRDb2RlQWZ0ZXJTYXZlIiwicmVxdWVzdCIsIl9vbkNsb3VkQ29kZU1lc3NhZ2UiLCJQYXJzZSIsImFwcGxpY2F0aW9uSWQiLCJvbkNsb3VkQ29kZUFmdGVyRGVsZXRlIiwidHlwZSIsImxvZ2dlciIsInZlcmJvc2UiLCJvYmplY3QiLCJvcmlnaW5hbCIsIm1lc3NhZ2UiLCJjdXJyZW50UGFyc2VPYmplY3QiLCJfdG9GdWxsSlNPTiIsIm9yaWdpbmFsUGFyc2VPYmplY3QiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VQdWJTdWIgfSBmcm9tICcuL1BhcnNlUHViU3ViJztcbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY2xhc3MgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIge1xuICBwYXJzZVB1Ymxpc2hlcjogT2JqZWN0O1xuXG4gIC8vIGNvbmZpZyBvYmplY3Qgb2YgdGhlIHB1Ymxpc2hlciwgcmlnaHQgbm93IGl0IG9ubHkgY29udGFpbnMgdGhlIHJlZGlzVVJMLFxuICAvLyBidXQgd2UgbWF5IGV4dGVuZCBpdCBsYXRlci5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIgPSBQYXJzZVB1YlN1Yi5jcmVhdGVQdWJsaXNoZXIoY29uZmlnKTtcbiAgfVxuXG4gIG9uQ2xvdWRDb2RlQWZ0ZXJTYXZlKHJlcXVlc3Q6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2xvdWRDb2RlTWVzc2FnZShQYXJzZS5hcHBsaWNhdGlvbklkICsgJ2FmdGVyU2F2ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgb25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9vbkNsb3VkQ29kZU1lc3NhZ2UoUGFyc2UuYXBwbGljYXRpb25JZCArICdhZnRlckRlbGV0ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgLy8gUmVxdWVzdCBpcyB0aGUgcmVxdWVzdCBvYmplY3QgZnJvbSBjbG91ZCBjb2RlIGZ1bmN0aW9ucy4gcmVxdWVzdC5vYmplY3QgaXMgYSBQYXJzZU9iamVjdC5cbiAgX29uQ2xvdWRDb2RlTWVzc2FnZSh0eXBlOiBzdHJpbmcsIHJlcXVlc3Q6IGFueSk6IHZvaWQge1xuICAgIGxvZ2dlci52ZXJib3NlKFxuICAgICAgJ1JhdyByZXF1ZXN0IGZyb20gY2xvdWQgY29kZSBjdXJyZW50IDogJWogfCBvcmlnaW5hbCA6ICVqJyxcbiAgICAgIHJlcXVlc3Qub2JqZWN0LFxuICAgICAgcmVxdWVzdC5vcmlnaW5hbFxuICAgICk7XG4gICAgLy8gV2UgbmVlZCB0aGUgZnVsbCBKU09OIHdoaWNoIGluY2x1ZGVzIGNsYXNzTmFtZVxuICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICBjdXJyZW50UGFyc2VPYmplY3Q6IHJlcXVlc3Qub2JqZWN0Ll90b0Z1bGxKU09OKCksXG4gICAgfTtcbiAgICBpZiAocmVxdWVzdC5vcmlnaW5hbCkge1xuICAgICAgbWVzc2FnZS5vcmlnaW5hbFBhcnNlT2JqZWN0ID0gcmVxdWVzdC5vcmlnaW5hbC5fdG9GdWxsSlNPTigpO1xuICAgIH1cbiAgICB0aGlzLnBhcnNlUHVibGlzaGVyLnB1Ymxpc2godHlwZSwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLHVCQUFOLENBQThCO0VBRzVCO0VBQ0E7RUFDQUMsV0FBVyxDQUFDQyxNQUFXLEdBQUcsRUFBZixFQUFtQjtJQUM1QixLQUFLQyxjQUFMLEdBQXNCQyx3QkFBQSxDQUFZQyxlQUFaLENBQTRCSCxNQUE1QixDQUF0QjtFQUNEOztFQUVESSxvQkFBb0IsQ0FBQ0MsT0FBRCxFQUFxQjtJQUN2QyxLQUFLQyxtQkFBTCxDQUF5QkMsYUFBQSxDQUFNQyxhQUFOLEdBQXNCLFdBQS9DLEVBQTRESCxPQUE1RDtFQUNEOztFQUVESSxzQkFBc0IsQ0FBQ0osT0FBRCxFQUFxQjtJQUN6QyxLQUFLQyxtQkFBTCxDQUF5QkMsYUFBQSxDQUFNQyxhQUFOLEdBQXNCLGFBQS9DLEVBQThESCxPQUE5RDtFQUNELENBZjJCLENBaUI1Qjs7O0VBQ0FDLG1CQUFtQixDQUFDSSxJQUFELEVBQWVMLE9BQWYsRUFBbUM7SUFDcERNLGVBQUEsQ0FBT0MsT0FBUCxDQUNFLDBEQURGLEVBRUVQLE9BQU8sQ0FBQ1EsTUFGVixFQUdFUixPQUFPLENBQUNTLFFBSFYsRUFEb0QsQ0FNcEQ7OztJQUNBLE1BQU1DLE9BQU8sR0FBRztNQUNkQyxrQkFBa0IsRUFBRVgsT0FBTyxDQUFDUSxNQUFSLENBQWVJLFdBQWY7SUFETixDQUFoQjs7SUFHQSxJQUFJWixPQUFPLENBQUNTLFFBQVosRUFBc0I7TUFDcEJDLE9BQU8sQ0FBQ0csbUJBQVIsR0FBOEJiLE9BQU8sQ0FBQ1MsUUFBUixDQUFpQkcsV0FBakIsRUFBOUI7SUFDRDs7SUFDRCxLQUFLaEIsY0FBTCxDQUFvQmtCLE9BQXBCLENBQTRCVCxJQUE1QixFQUFrQ1UsSUFBSSxDQUFDQyxTQUFMLENBQWVOLE9BQWYsQ0FBbEM7RUFDRDs7QUFoQzJCIn0=