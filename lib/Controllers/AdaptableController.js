"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AdaptableController = void 0;

/*
AdaptableController.js

AdaptableController is the base class for all controllers
that support adapter,
The super class takes care of creating the right instance for the adapter
based on the parameters passed

 */
// _adapter is private, use Symbol
var _adapter = Symbol();

class AdaptableController {
  constructor(adapter, appId, options) {
    this.options = options;
    this.appId = appId;
    this.adapter = adapter;
  }

  set adapter(adapter) {
    this.validateAdapter(adapter);
    this[_adapter] = adapter;
  }

  get adapter() {
    return this[_adapter];
  }

  expectedAdapterType() {
    throw new Error('Subclasses should implement expectedAdapterType()');
  }

  validateAdapter(adapter) {
    AdaptableController.validateAdapter(adapter, this);
  }

  static validateAdapter(adapter, self, ExpectedType) {
    if (!adapter) {
      throw new Error(this.constructor.name + ' requires an adapter');
    }

    const Type = ExpectedType || self.expectedAdapterType(); // Allow skipping for testing

    if (!Type) {
      return;
    } // Makes sure the prototype matches


    const mismatches = Object.getOwnPropertyNames(Type.prototype).reduce((obj, key) => {
      const adapterType = typeof adapter[key];
      const expectedType = typeof Type.prototype[key];

      if (adapterType !== expectedType) {
        obj[key] = {
          expected: expectedType,
          actual: adapterType
        };
      }

      return obj;
    }, {});

    if (Object.keys(mismatches).length > 0) {
      throw new Error("Adapter prototype don't match expected prototype", adapter, mismatches);
    }
  }

}

exports.AdaptableController = AdaptableController;
var _default = AdaptableController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWRhcHRlciIsIlN5bWJvbCIsIkFkYXB0YWJsZUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImFkYXB0ZXIiLCJhcHBJZCIsIm9wdGlvbnMiLCJ2YWxpZGF0ZUFkYXB0ZXIiLCJleHBlY3RlZEFkYXB0ZXJUeXBlIiwiRXJyb3IiLCJzZWxmIiwiRXhwZWN0ZWRUeXBlIiwibmFtZSIsIlR5cGUiLCJtaXNtYXRjaGVzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3RvdHlwZSIsInJlZHVjZSIsIm9iaiIsImtleSIsImFkYXB0ZXJUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJrZXlzIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyb2xsZXJzL0FkYXB0YWJsZUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkFkYXB0YWJsZUNvbnRyb2xsZXIuanNcblxuQWRhcHRhYmxlQ29udHJvbGxlciBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIGNvbnRyb2xsZXJzXG50aGF0IHN1cHBvcnQgYWRhcHRlcixcblRoZSBzdXBlciBjbGFzcyB0YWtlcyBjYXJlIG9mIGNyZWF0aW5nIHRoZSByaWdodCBpbnN0YW5jZSBmb3IgdGhlIGFkYXB0ZXJcbmJhc2VkIG9uIHRoZSBwYXJhbWV0ZXJzIHBhc3NlZFxuXG4gKi9cblxuLy8gX2FkYXB0ZXIgaXMgcHJpdmF0ZSwgdXNlIFN5bWJvbFxudmFyIF9hZGFwdGVyID0gU3ltYm9sKCk7XG5cbmV4cG9ydCBjbGFzcyBBZGFwdGFibGVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoYWRhcHRlciwgYXBwSWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuYXBwSWQgPSBhcHBJZDtcbiAgICB0aGlzLmFkYXB0ZXIgPSBhZGFwdGVyO1xuICB9XG5cbiAgc2V0IGFkYXB0ZXIoYWRhcHRlcikge1xuICAgIHRoaXMudmFsaWRhdGVBZGFwdGVyKGFkYXB0ZXIpO1xuICAgIHRoaXNbX2FkYXB0ZXJdID0gYWRhcHRlcjtcbiAgfVxuXG4gIGdldCBhZGFwdGVyKCkge1xuICAgIHJldHVybiB0aGlzW19hZGFwdGVyXTtcbiAgfVxuXG4gIGV4cGVjdGVkQWRhcHRlclR5cGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTdWJjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgZXhwZWN0ZWRBZGFwdGVyVHlwZSgpJyk7XG4gIH1cblxuICB2YWxpZGF0ZUFkYXB0ZXIoYWRhcHRlcikge1xuICAgIEFkYXB0YWJsZUNvbnRyb2xsZXIudmFsaWRhdGVBZGFwdGVyKGFkYXB0ZXIsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlQWRhcHRlcihhZGFwdGVyLCBzZWxmLCBFeHBlY3RlZFR5cGUpIHtcbiAgICBpZiAoIWFkYXB0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnIHJlcXVpcmVzIGFuIGFkYXB0ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCBUeXBlID0gRXhwZWN0ZWRUeXBlIHx8IHNlbGYuZXhwZWN0ZWRBZGFwdGVyVHlwZSgpO1xuICAgIC8vIEFsbG93IHNraXBwaW5nIGZvciB0ZXN0aW5nXG4gICAgaWYgKCFUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTWFrZXMgc3VyZSB0aGUgcHJvdG90eXBlIG1hdGNoZXNcbiAgICBjb25zdCBtaXNtYXRjaGVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoVHlwZS5wcm90b3R5cGUpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IGFkYXB0ZXJUeXBlID0gdHlwZW9mIGFkYXB0ZXJba2V5XTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IHR5cGVvZiBUeXBlLnByb3RvdHlwZVtrZXldO1xuICAgICAgaWYgKGFkYXB0ZXJUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgb2JqW2tleV0gPSB7XG4gICAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkVHlwZSxcbiAgICAgICAgICBhY3R1YWw6IGFkYXB0ZXJUeXBlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMobWlzbWF0Y2hlcykubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWRhcHRlciBwcm90b3R5cGUgZG9uJ3QgbWF0Y2ggZXhwZWN0ZWQgcHJvdG90eXBlXCIsIGFkYXB0ZXIsIG1pc21hdGNoZXMpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBZGFwdGFibGVDb250cm9sbGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxJQUFJQSxRQUFRLEdBQUdDLE1BQU0sRUFBckI7O0FBRU8sTUFBTUMsbUJBQU4sQ0FBMEI7RUFDL0JDLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxLQUFWLEVBQWlCQyxPQUFqQixFQUEwQjtJQUNuQyxLQUFLQSxPQUFMLEdBQWVBLE9BQWY7SUFDQSxLQUFLRCxLQUFMLEdBQWFBLEtBQWI7SUFDQSxLQUFLRCxPQUFMLEdBQWVBLE9BQWY7RUFDRDs7RUFFVSxJQUFQQSxPQUFPLENBQUNBLE9BQUQsRUFBVTtJQUNuQixLQUFLRyxlQUFMLENBQXFCSCxPQUFyQjtJQUNBLEtBQUtKLFFBQUwsSUFBaUJJLE9BQWpCO0VBQ0Q7O0VBRVUsSUFBUEEsT0FBTyxHQUFHO0lBQ1osT0FBTyxLQUFLSixRQUFMLENBQVA7RUFDRDs7RUFFRFEsbUJBQW1CLEdBQUc7SUFDcEIsTUFBTSxJQUFJQyxLQUFKLENBQVUsbURBQVYsQ0FBTjtFQUNEOztFQUVERixlQUFlLENBQUNILE9BQUQsRUFBVTtJQUN2QkYsbUJBQW1CLENBQUNLLGVBQXBCLENBQW9DSCxPQUFwQyxFQUE2QyxJQUE3QztFQUNEOztFQUVxQixPQUFmRyxlQUFlLENBQUNILE9BQUQsRUFBVU0sSUFBVixFQUFnQkMsWUFBaEIsRUFBOEI7SUFDbEQsSUFBSSxDQUFDUCxPQUFMLEVBQWM7TUFDWixNQUFNLElBQUlLLEtBQUosQ0FBVSxLQUFLTixXQUFMLENBQWlCUyxJQUFqQixHQUF3QixzQkFBbEMsQ0FBTjtJQUNEOztJQUVELE1BQU1DLElBQUksR0FBR0YsWUFBWSxJQUFJRCxJQUFJLENBQUNGLG1CQUFMLEVBQTdCLENBTGtELENBTWxEOztJQUNBLElBQUksQ0FBQ0ssSUFBTCxFQUFXO01BQ1Q7SUFDRCxDQVRpRCxDQVdsRDs7O0lBQ0EsTUFBTUMsVUFBVSxHQUFHQyxNQUFNLENBQUNDLG1CQUFQLENBQTJCSCxJQUFJLENBQUNJLFNBQWhDLEVBQTJDQyxNQUEzQyxDQUFrRCxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztNQUNqRixNQUFNQyxXQUFXLEdBQUcsT0FBT2pCLE9BQU8sQ0FBQ2dCLEdBQUQsQ0FBbEM7TUFDQSxNQUFNRSxZQUFZLEdBQUcsT0FBT1QsSUFBSSxDQUFDSSxTQUFMLENBQWVHLEdBQWYsQ0FBNUI7O01BQ0EsSUFBSUMsV0FBVyxLQUFLQyxZQUFwQixFQUFrQztRQUNoQ0gsR0FBRyxDQUFDQyxHQUFELENBQUgsR0FBVztVQUNURyxRQUFRLEVBQUVELFlBREQ7VUFFVEUsTUFBTSxFQUFFSDtRQUZDLENBQVg7TUFJRDs7TUFDRCxPQUFPRixHQUFQO0lBQ0QsQ0FWa0IsRUFVaEIsRUFWZ0IsQ0FBbkI7O0lBWUEsSUFBSUosTUFBTSxDQUFDVSxJQUFQLENBQVlYLFVBQVosRUFBd0JZLE1BQXhCLEdBQWlDLENBQXJDLEVBQXdDO01BQ3RDLE1BQU0sSUFBSWpCLEtBQUosQ0FBVSxrREFBVixFQUE4REwsT0FBOUQsRUFBdUVVLFVBQXZFLENBQU47SUFDRDtFQUNGOztBQW5EOEI7OztlQXNEbEJaLG1CIn0=