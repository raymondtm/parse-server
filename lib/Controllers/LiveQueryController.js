"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LiveQueryController = void 0;

var _ParseCloudCodePublisher = require("../LiveQuery/ParseCloudCodePublisher");

var _Options = require("../Options");

var _triggers = require("./../triggers");

class LiveQueryController {
  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      const classNames = config.classNames.map(name => {
        const _name = (0, _triggers.getClassName)(name);

        return new RegExp(`^${_name}$`);
      });
      this.classNames = new Set(classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }

    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }

  onAfterSave(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }

  onAfterDelete(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }

    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);

    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }

  hasLiveQuery(className) {
    for (const name of this.classNames) {
      if (name.test(className)) {
        return true;
      }
    }

    return false;
  }

  _makePublisherRequest(currentObject, originalObject, classLevelPermissions) {
    const req = {
      object: currentObject
    };

    if (currentObject) {
      req.original = originalObject;
    }

    if (classLevelPermissions) {
      req.classLevelPermissions = classLevelPermissions;
    }

    return req;
  }

}

exports.LiveQueryController = LiveQueryController;
var _default = LiveQueryController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9MaXZlUXVlcnlDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkxpdmVRdWVyeUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNsYXNzTmFtZXMiLCJTZXQiLCJBcnJheSIsIm1hcCIsIm5hbWUiLCJfbmFtZSIsIlJlZ0V4cCIsImxpdmVRdWVyeVB1Ymxpc2hlciIsIlBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIiwib25BZnRlclNhdmUiLCJjbGFzc05hbWUiLCJjdXJyZW50T2JqZWN0Iiwib3JpZ2luYWxPYmplY3QiLCJjbGFzc0xldmVsUGVybWlzc2lvbnMiLCJoYXNMaXZlUXVlcnkiLCJyZXEiLCJfbWFrZVB1Ymxpc2hlclJlcXVlc3QiLCJvbkNsb3VkQ29kZUFmdGVyU2F2ZSIsIm9uQWZ0ZXJEZWxldGUiLCJvbkNsb3VkQ29kZUFmdGVyRGVsZXRlIiwidGVzdCIsIm9iamVjdCIsIm9yaWdpbmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ08sTUFBTUEsbUJBQU4sQ0FBMEI7QUFJL0JDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUE0QjtBQUNyQztBQUNBLFFBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE1BQU0sQ0FBQ0MsVUFBdkIsRUFBbUM7QUFDakMsV0FBS0EsVUFBTCxHQUFrQixJQUFJQyxHQUFKLEVBQWxCO0FBQ0QsS0FGRCxNQUVPLElBQUlGLE1BQU0sQ0FBQ0MsVUFBUCxZQUE2QkUsS0FBakMsRUFBd0M7QUFDN0MsWUFBTUYsVUFBVSxHQUFHRCxNQUFNLENBQUNDLFVBQVAsQ0FBa0JHLEdBQWxCLENBQXNCQyxJQUFJLElBQUk7QUFDL0MsY0FBTUMsS0FBSyxHQUFHLDRCQUFhRCxJQUFiLENBQWQ7O0FBQ0EsZUFBTyxJQUFJRSxNQUFKLENBQVksSUFBR0QsS0FBTSxHQUFyQixDQUFQO0FBQ0QsT0FIa0IsQ0FBbkI7QUFJQSxXQUFLTCxVQUFMLEdBQWtCLElBQUlDLEdBQUosQ0FBUUQsVUFBUixDQUFsQjtBQUNELEtBTk0sTUFNQTtBQUNMLFlBQU0sZ0RBQU47QUFDRDs7QUFDRCxTQUFLTyxrQkFBTCxHQUEwQixJQUFJQyxnREFBSixDQUE0QlQsTUFBNUIsQ0FBMUI7QUFDRDs7QUFFRFUsRUFBQUEsV0FBVyxDQUNUQyxTQURTLEVBRVRDLGFBRlMsRUFHVEMsY0FIUyxFQUlUQyxxQkFKUyxFQUtUO0FBQ0EsUUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JKLFNBQWxCLENBQUwsRUFBbUM7QUFDakM7QUFDRDs7QUFDRCxVQUFNSyxHQUFHLEdBQUcsS0FBS0MscUJBQUwsQ0FBMkJMLGFBQTNCLEVBQTBDQyxjQUExQyxFQUEwREMscUJBQTFELENBQVo7O0FBQ0EsU0FBS04sa0JBQUwsQ0FBd0JVLG9CQUF4QixDQUE2Q0YsR0FBN0M7QUFDRDs7QUFFREcsRUFBQUEsYUFBYSxDQUNYUixTQURXLEVBRVhDLGFBRlcsRUFHWEMsY0FIVyxFQUlYQyxxQkFKVyxFQUtYO0FBQ0EsUUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JKLFNBQWxCLENBQUwsRUFBbUM7QUFDakM7QUFDRDs7QUFDRCxVQUFNSyxHQUFHLEdBQUcsS0FBS0MscUJBQUwsQ0FBMkJMLGFBQTNCLEVBQTBDQyxjQUExQyxFQUEwREMscUJBQTFELENBQVo7O0FBQ0EsU0FBS04sa0JBQUwsQ0FBd0JZLHNCQUF4QixDQUErQ0osR0FBL0M7QUFDRDs7QUFFREQsRUFBQUEsWUFBWSxDQUFDSixTQUFELEVBQTZCO0FBQ3ZDLFNBQUssTUFBTU4sSUFBWCxJQUFtQixLQUFLSixVQUF4QixFQUFvQztBQUNsQyxVQUFJSSxJQUFJLENBQUNnQixJQUFMLENBQVVWLFNBQVYsQ0FBSixFQUEwQjtBQUN4QixlQUFPLElBQVA7QUFDRDtBQUNGOztBQUNELFdBQU8sS0FBUDtBQUNEOztBQUVETSxFQUFBQSxxQkFBcUIsQ0FBQ0wsYUFBRCxFQUFxQkMsY0FBckIsRUFBMENDLHFCQUExQyxFQUE0RTtBQUMvRixVQUFNRSxHQUFHLEdBQUc7QUFDVk0sTUFBQUEsTUFBTSxFQUFFVjtBQURFLEtBQVo7O0FBR0EsUUFBSUEsYUFBSixFQUFtQjtBQUNqQkksTUFBQUEsR0FBRyxDQUFDTyxRQUFKLEdBQWVWLGNBQWY7QUFDRDs7QUFDRCxRQUFJQyxxQkFBSixFQUEyQjtBQUN6QkUsTUFBQUEsR0FBRyxDQUFDRixxQkFBSixHQUE0QkEscUJBQTVCO0FBQ0Q7O0FBQ0QsV0FBT0UsR0FBUDtBQUNEOztBQWxFOEI7OztlQXFFbEJsQixtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIH0gZnJvbSAnLi4vTGl2ZVF1ZXJ5L1BhcnNlQ2xvdWRDb2RlUHVibGlzaGVyJztcbmltcG9ydCB7IExpdmVRdWVyeU9wdGlvbnMgfSBmcm9tICcuLi9PcHRpb25zJztcbmltcG9ydCB7IGdldENsYXNzTmFtZSB9IGZyb20gJy4vLi4vdHJpZ2dlcnMnO1xuZXhwb3J0IGNsYXNzIExpdmVRdWVyeUNvbnRyb2xsZXIge1xuICBjbGFzc05hbWVzOiBhbnk7XG4gIGxpdmVRdWVyeVB1Ymxpc2hlcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogP0xpdmVRdWVyeU9wdGlvbnMpIHtcbiAgICAvLyBJZiBjb25maWcgaXMgZW1wdHksIHdlIGp1c3QgYXNzdW1lIG5vIGNsYXNzcyBuZWVkcyB0byBiZSByZWdpc3RlcmVkIGFzIExpdmVRdWVyeVxuICAgIGlmICghY29uZmlnIHx8ICFjb25maWcuY2xhc3NOYW1lcykge1xuICAgICAgdGhpcy5jbGFzc05hbWVzID0gbmV3IFNldCgpO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLmNsYXNzTmFtZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IGNvbmZpZy5jbGFzc05hbWVzLm1hcChuYW1lID0+IHtcbiAgICAgICAgY29uc3QgX25hbWUgPSBnZXRDbGFzc05hbWUobmFtZSk7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHtfbmFtZX0kYCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IG5ldyBTZXQoY2xhc3NOYW1lcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdsaXZlUXVlcnkuY2xhc3NlcyBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nJztcbiAgICB9XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIgPSBuZXcgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIoY29uZmlnKTtcbiAgfVxuXG4gIG9uQWZ0ZXJTYXZlKFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIGN1cnJlbnRPYmplY3Q6IGFueSxcbiAgICBvcmlnaW5hbE9iamVjdDogYW55LFxuICAgIGNsYXNzTGV2ZWxQZXJtaXNzaW9uczogP2FueVxuICApIHtcbiAgICBpZiAoIXRoaXMuaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVxID0gdGhpcy5fbWFrZVB1Ymxpc2hlclJlcXVlc3QoY3VycmVudE9iamVjdCwgb3JpZ2luYWxPYmplY3QsIGNsYXNzTGV2ZWxQZXJtaXNzaW9ucyk7XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbG91ZENvZGVBZnRlclNhdmUocmVxKTtcbiAgfVxuXG4gIG9uQWZ0ZXJEZWxldGUoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgY3VycmVudE9iamVjdDogYW55LFxuICAgIG9yaWdpbmFsT2JqZWN0OiBhbnksXG4gICAgY2xhc3NMZXZlbFBlcm1pc3Npb25zOiBhbnlcbiAgKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpdmVRdWVyeShjbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IHRoaXMuX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3QsIG9yaWdpbmFsT2JqZWN0LCBjbGFzc0xldmVsUGVybWlzc2lvbnMpO1xuICAgIHRoaXMubGl2ZVF1ZXJ5UHVibGlzaGVyLm9uQ2xvdWRDb2RlQWZ0ZXJEZWxldGUocmVxKTtcbiAgfVxuXG4gIGhhc0xpdmVRdWVyeShjbGFzc05hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmNsYXNzTmFtZXMpIHtcbiAgICAgIGlmIChuYW1lLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3Q6IGFueSwgb3JpZ2luYWxPYmplY3Q6IGFueSwgY2xhc3NMZXZlbFBlcm1pc3Npb25zOiA/YW55KTogYW55IHtcbiAgICBjb25zdCByZXEgPSB7XG4gICAgICBvYmplY3Q6IGN1cnJlbnRPYmplY3QsXG4gICAgfTtcbiAgICBpZiAoY3VycmVudE9iamVjdCkge1xuICAgICAgcmVxLm9yaWdpbmFsID0gb3JpZ2luYWxPYmplY3Q7XG4gICAgfVxuICAgIGlmIChjbGFzc0xldmVsUGVybWlzc2lvbnMpIHtcbiAgICAgIHJlcS5jbGFzc0xldmVsUGVybWlzc2lvbnMgPSBjbGFzc0xldmVsUGVybWlzc2lvbnM7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGl2ZVF1ZXJ5Q29udHJvbGxlcjtcbiJdfQ==