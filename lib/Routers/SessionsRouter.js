"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SessionsRouter = void 0;

var _ClassesRouter = _interopRequireDefault(require("./ClassesRouter"));

var _node = _interopRequireDefault(require("parse/node"));

var _rest = _interopRequireDefault(require("../rest"));

var _Auth = _interopRequireDefault(require("../Auth"));

var _RestWrite = _interopRequireDefault(require("../RestWrite"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SessionsRouter extends _ClassesRouter.default {
  className() {
    return '_Session';
  }

  handleMe(req) {
    // TODO: Verify correct behavior
    if (!req.info || !req.info.sessionToken) {
      throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Session token required.');
    }

    return _rest.default.find(req.config, _Auth.default.master(req.config), '_Session', {
      sessionToken: req.info.sessionToken
    }, undefined, req.info.clientSDK, req.info.context).then(response => {
      if (!response.results || response.results.length == 0) {
        throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Session token not found.');
      }

      return {
        response: response.results[0]
      };
    });
  }

  handleUpdateToRevocableSession(req) {
    const config = req.config;
    const user = req.auth.user; // Issue #2720
    // Calling without a session token would result in a not found user

    if (!user) {
      throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND, 'invalid session');
    }

    const {
      sessionData,
      createSession
    } = _RestWrite.default.createSession(config, {
      userId: user.id,
      createdWith: {
        action: 'upgrade'
      },
      installationId: req.auth.installationId
    });

    return createSession().then(() => {
      // delete the session token, use the db to skip beforeSave
      return config.database.update('_User', {
        objectId: user.id
      }, {
        sessionToken: {
          __op: 'Delete'
        }
      });
    }).then(() => {
      return Promise.resolve({
        response: sessionData
      });
    });
  }

  mountRoutes() {
    this.route('GET', '/sessions/me', req => {
      return this.handleMe(req);
    });
    this.route('GET', '/sessions', req => {
      return this.handleFind(req);
    });
    this.route('GET', '/sessions/:objectId', req => {
      return this.handleGet(req);
    });
    this.route('POST', '/sessions', req => {
      return this.handleCreate(req);
    });
    this.route('PUT', '/sessions/:objectId', req => {
      return this.handleUpdate(req);
    });
    this.route('DELETE', '/sessions/:objectId', req => {
      return this.handleDelete(req);
    });
    this.route('POST', '/upgradeToRevocableSession', req => {
      return this.handleUpdateToRevocableSession(req);
    });
  }

}

exports.SessionsRouter = SessionsRouter;
var _default = SessionsRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZXNzaW9uc1JvdXRlciIsIkNsYXNzZXNSb3V0ZXIiLCJjbGFzc05hbWUiLCJoYW5kbGVNZSIsInJlcSIsImluZm8iLCJzZXNzaW9uVG9rZW4iLCJQYXJzZSIsIkVycm9yIiwiSU5WQUxJRF9TRVNTSU9OX1RPS0VOIiwicmVzdCIsImZpbmQiLCJjb25maWciLCJBdXRoIiwibWFzdGVyIiwidW5kZWZpbmVkIiwiY2xpZW50U0RLIiwiY29udGV4dCIsInRoZW4iLCJyZXNwb25zZSIsInJlc3VsdHMiLCJsZW5ndGgiLCJoYW5kbGVVcGRhdGVUb1Jldm9jYWJsZVNlc3Npb24iLCJ1c2VyIiwiYXV0aCIsIk9CSkVDVF9OT1RfRk9VTkQiLCJzZXNzaW9uRGF0YSIsImNyZWF0ZVNlc3Npb24iLCJSZXN0V3JpdGUiLCJ1c2VySWQiLCJpZCIsImNyZWF0ZWRXaXRoIiwiYWN0aW9uIiwiaW5zdGFsbGF0aW9uSWQiLCJkYXRhYmFzZSIsInVwZGF0ZSIsIm9iamVjdElkIiwiX19vcCIsIlByb21pc2UiLCJyZXNvbHZlIiwibW91bnRSb3V0ZXMiLCJyb3V0ZSIsImhhbmRsZUZpbmQiLCJoYW5kbGVHZXQiLCJoYW5kbGVDcmVhdGUiLCJoYW5kbGVVcGRhdGUiLCJoYW5kbGVEZWxldGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvUm91dGVycy9TZXNzaW9uc1JvdXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xhc3Nlc1JvdXRlciBmcm9tICcuL0NsYXNzZXNSb3V0ZXInO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vcmVzdCc7XG5pbXBvcnQgQXV0aCBmcm9tICcuLi9BdXRoJztcbmltcG9ydCBSZXN0V3JpdGUgZnJvbSAnLi4vUmVzdFdyaXRlJztcblxuZXhwb3J0IGNsYXNzIFNlc3Npb25zUm91dGVyIGV4dGVuZHMgQ2xhc3Nlc1JvdXRlciB7XG4gIGNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gJ19TZXNzaW9uJztcbiAgfVxuXG4gIGhhbmRsZU1lKHJlcSkge1xuICAgIC8vIFRPRE86IFZlcmlmeSBjb3JyZWN0IGJlaGF2aW9yXG4gICAgaWYgKCFyZXEuaW5mbyB8fCAhcmVxLmluZm8uc2Vzc2lvblRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnU2Vzc2lvbiB0b2tlbiByZXF1aXJlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RcbiAgICAgIC5maW5kKFxuICAgICAgICByZXEuY29uZmlnLFxuICAgICAgICBBdXRoLm1hc3RlcihyZXEuY29uZmlnKSxcbiAgICAgICAgJ19TZXNzaW9uJyxcbiAgICAgICAgeyBzZXNzaW9uVG9rZW46IHJlcS5pbmZvLnNlc3Npb25Ub2tlbiB9LFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHJlcS5pbmZvLmNsaWVudFNESyxcbiAgICAgICAgcmVxLmluZm8uY29udGV4dFxuICAgICAgKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLnJlc3VsdHMgfHwgcmVzcG9uc2UucmVzdWx0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX1NFU1NJT05fVE9LRU4sICdTZXNzaW9uIHRva2VuIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZS5yZXN1bHRzWzBdLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cblxuICBoYW5kbGVVcGRhdGVUb1Jldm9jYWJsZVNlc3Npb24ocmVxKSB7XG4gICAgY29uc3QgY29uZmlnID0gcmVxLmNvbmZpZztcbiAgICBjb25zdCB1c2VyID0gcmVxLmF1dGgudXNlcjtcbiAgICAvLyBJc3N1ZSAjMjcyMFxuICAgIC8vIENhbGxpbmcgd2l0aG91dCBhIHNlc3Npb24gdG9rZW4gd291bGQgcmVzdWx0IGluIGEgbm90IGZvdW5kIHVzZXJcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnaW52YWxpZCBzZXNzaW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgc2Vzc2lvbkRhdGEsIGNyZWF0ZVNlc3Npb24gfSA9IFJlc3RXcml0ZS5jcmVhdGVTZXNzaW9uKGNvbmZpZywge1xuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgY3JlYXRlZFdpdGg6IHtcbiAgICAgICAgYWN0aW9uOiAndXBncmFkZScsXG4gICAgICB9LFxuICAgICAgaW5zdGFsbGF0aW9uSWQ6IHJlcS5hdXRoLmluc3RhbGxhdGlvbklkLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZVNlc3Npb24oKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyBkZWxldGUgdGhlIHNlc3Npb24gdG9rZW4sIHVzZSB0aGUgZGIgdG8gc2tpcCBiZWZvcmVTYXZlXG4gICAgICAgIHJldHVybiBjb25maWcuZGF0YWJhc2UudXBkYXRlKFxuICAgICAgICAgICdfVXNlcicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgb2JqZWN0SWQ6IHVzZXIuaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZXNzaW9uVG9rZW46IHsgX19vcDogJ0RlbGV0ZScgfSxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgcmVzcG9uc2U6IHNlc3Npb25EYXRhIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBtb3VudFJvdXRlcygpIHtcbiAgICB0aGlzLnJvdXRlKCdHRVQnLCAnL3Nlc3Npb25zL21lJywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZU1lKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy9zZXNzaW9ucycsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVGaW5kKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy9zZXNzaW9ucy86b2JqZWN0SWQnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlR2V0KHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnUE9TVCcsICcvc2Vzc2lvbnMnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ3JlYXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnUFVUJywgJy9zZXNzaW9ucy86b2JqZWN0SWQnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlVXBkYXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnREVMRVRFJywgJy9zZXNzaW9ucy86b2JqZWN0SWQnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRGVsZXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnUE9TVCcsICcvdXBncmFkZVRvUmV2b2NhYmxlU2Vzc2lvbicsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVVcGRhdGVUb1Jldm9jYWJsZVNlc3Npb24ocmVxKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXNzaW9uc1JvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sTUFBTUEsY0FBTixTQUE2QkMsc0JBQTdCLENBQTJDO0VBQ2hEQyxTQUFTLEdBQUc7SUFDVixPQUFPLFVBQVA7RUFDRDs7RUFFREMsUUFBUSxDQUFDQyxHQUFELEVBQU07SUFDWjtJQUNBLElBQUksQ0FBQ0EsR0FBRyxDQUFDQyxJQUFMLElBQWEsQ0FBQ0QsR0FBRyxDQUFDQyxJQUFKLENBQVND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