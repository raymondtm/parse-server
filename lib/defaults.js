"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DefaultMongoURI = void 0;

var _parsers = require("./Options/parsers");

const {
  ParseServerOptions
} = require('./Options/Definitions');

const logsFolder = (() => {
  let folder = './logs/';

  if (typeof process !== 'undefined' && process.env.TESTING === '1') {
    folder = './test_logs/';
  }

  if (process.env.PARSE_SERVER_LOGS_FOLDER) {
    folder = (0, _parsers.nullParser)(process.env.PARSE_SERVER_LOGS_FOLDER);
  }

  return folder;
})();

const {
  verbose,
  level
} = (() => {
  const verbose = process.env.VERBOSE ? true : false;
  return {
    verbose,
    level: verbose ? 'verbose' : undefined
  };
})();

const DefinitionDefaults = Object.keys(ParseServerOptions).reduce((memo, key) => {
  const def = ParseServerOptions[key];

  if (Object.prototype.hasOwnProperty.call(def, 'default')) {
    memo[key] = def.default;
  }

  return memo;
}, {});
const computedDefaults = {
  jsonLogs: process.env.JSON_LOGS || false,
  logsFolder,
  verbose,
  level
};

var _default = Object.assign({}, DefinitionDefaults, computedDefaults);

exports.default = _default;
const DefaultMongoURI = DefinitionDefaults.databaseURI;
exports.DefaultMongoURI = DefaultMongoURI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJzZVNlcnZlck9wdGlvbnMiLCJyZXF1aXJlIiwibG9nc0ZvbGRlciIsImZvbGRlciIsInByb2Nlc3MiLCJlbnYiLCJURVNUSU5HIiwiUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSIiwibnVsbFBhcnNlciIsInZlcmJvc2UiLCJsZXZlbCIsIlZFUkJPU0UiLCJ1bmRlZmluZWQiLCJEZWZpbml0aW9uRGVmYXVsdHMiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwibWVtbyIsImtleSIsImRlZiIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlZmF1bHQiLCJjb21wdXRlZERlZmF1bHRzIiwianNvbkxvZ3MiLCJKU09OX0xPR1MiLCJhc3NpZ24iLCJEZWZhdWx0TW9uZ29VUkkiLCJkYXRhYmFzZVVSSSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBudWxsUGFyc2VyIH0gZnJvbSAnLi9PcHRpb25zL3BhcnNlcnMnO1xuY29uc3QgeyBQYXJzZVNlcnZlck9wdGlvbnMgfSA9IHJlcXVpcmUoJy4vT3B0aW9ucy9EZWZpbml0aW9ucycpO1xuY29uc3QgbG9nc0ZvbGRlciA9ICgoKSA9PiB7XG4gIGxldCBmb2xkZXIgPSAnLi9sb2dzLyc7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuVEVTVElORyA9PT0gJzEnKSB7XG4gICAgZm9sZGVyID0gJy4vdGVzdF9sb2dzLyc7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52LlBBUlNFX1NFUlZFUl9MT0dTX0ZPTERFUikge1xuICAgIGZvbGRlciA9IG51bGxQYXJzZXIocHJvY2Vzcy5lbnYuUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSKTtcbiAgfVxuICByZXR1cm4gZm9sZGVyO1xufSkoKTtcblxuY29uc3QgeyB2ZXJib3NlLCBsZXZlbCB9ID0gKCgpID0+IHtcbiAgY29uc3QgdmVyYm9zZSA9IHByb2Nlc3MuZW52LlZFUkJPU0UgPyB0cnVlIDogZmFsc2U7XG4gIHJldHVybiB7IHZlcmJvc2UsIGxldmVsOiB2ZXJib3NlID8gJ3ZlcmJvc2UnIDogdW5kZWZpbmVkIH07XG59KSgpO1xuXG5jb25zdCBEZWZpbml0aW9uRGVmYXVsdHMgPSBPYmplY3Qua2V5cyhQYXJzZVNlcnZlck9wdGlvbnMpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gIGNvbnN0IGRlZiA9IFBhcnNlU2VydmVyT3B0aW9uc1trZXldO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlZiwgJ2RlZmF1bHQnKSkge1xuICAgIG1lbW9ba2V5XSA9IGRlZi5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBtZW1vO1xufSwge30pO1xuXG5jb25zdCBjb21wdXRlZERlZmF1bHRzID0ge1xuICBqc29uTG9nczogcHJvY2Vzcy5lbnYuSlNPTl9MT0dTIHx8IGZhbHNlLFxuICBsb2dzRm9sZGVyLFxuICB2ZXJib3NlLFxuICBsZXZlbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24oe30sIERlZmluaXRpb25EZWZhdWx0cywgY29tcHV0ZWREZWZhdWx0cyk7XG5leHBvcnQgY29uc3QgRGVmYXVsdE1vbmdvVVJJID0gRGVmaW5pdGlvbkRlZmF1bHRzLmRhdGFiYXNlVVJJO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0EsTUFBTTtFQUFFQTtBQUFGLElBQXlCQyxPQUFPLENBQUMsdUJBQUQsQ0FBdEM7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHLENBQUMsTUFBTTtFQUN4QixJQUFJQyxNQUFNLEdBQUcsU0FBYjs7RUFDQSxJQUFJLE9BQU9DLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxPQUFaLEtBQXdCLEdBQTlELEVBQW1FO0lBQ2pFSCxNQUFNLEdBQUcsY0FBVDtFQUNEOztFQUNELElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSx3QkFBaEIsRUFBMEM7SUFDeENKLE1BQU0sR0FBRyxJQUFBSyxtQkFBQSxFQUFXSixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsd0JBQXZCLENBQVQ7RUFDRDs7RUFDRCxPQUFPSixNQUFQO0FBQ0QsQ0FUa0IsR0FBbkI7O0FBV0EsTUFBTTtFQUFFTSxPQUFGO0VBQVdDO0FBQVgsSUFBcUIsQ0FBQyxNQUFNO0VBQ2hDLE1BQU1ELE9BQU8sR0FBR0wsT0FBTyxDQUFDQyxHQUFSLENBQVlNLE9BQVosR0FBc0IsSUFBdEIsR0FBNkIsS0FBN0M7RUFDQSxPQUFPO0lBQUVGLE9BQUY7SUFBV0MsS0FBSyxFQUFFRCxPQUFPLEdBQUcsU0FBSCxHQUFlRztFQUF4QyxDQUFQO0FBQ0QsQ0FIMEIsR0FBM0I7O0FBS0EsTUFBTUMsa0JBQWtCLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZZixrQkFBWixFQUFnQ2dCLE1BQWhDLENBQXVDLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFlO0VBQy9FLE1BQU1DLEdBQUcsR0FBR25CLGtCQUFrQixDQUFDa0IsR0FBRCxDQUE5Qjs7RUFDQSxJQUFJSixNQUFNLENBQUNNLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ0gsR0FBckMsRUFBMEMsU0FBMUMsQ0FBSixFQUEwRDtJQUN4REYsSUFBSSxDQUFDQyxHQUFELENBQUosR0FBWUMsR0FBRyxDQUFDSSxPQUFoQjtFQUNEOztFQUNELE9BQU9OLElBQVA7QUFDRCxDQU4wQixFQU14QixFQU53QixDQUEzQjtBQVFBLE1BQU1PLGdCQUFnQixHQUFHO0VBQ3ZCQyxRQUFRLEVBQUVyQixPQUFPLENBQUNDLEdBQVIsQ0FBWXFCLFNBQVosSUFBeUIsS0FEWjtFQUV2QnhCLFVBRnVCO0VBR3ZCTyxPQUh1QjtFQUl2QkM7QUFKdUIsQ0FBekI7O2VBT2VJLE1BQU0sQ0FBQ2EsTUFBUCxDQUFjLEVBQWQsRUFBa0JkLGtCQUFsQixFQUFzQ1csZ0JBQXRDLEM7OztBQUNSLE1BQU1JLGVBQWUsR0FBR2Ysa0JBQWtCLENBQUNnQixXQUEzQyJ9