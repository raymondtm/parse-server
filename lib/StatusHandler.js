"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flatten = flatten;
exports.jobStatusHandler = jobStatusHandler;
exports.pushStatusHandler = pushStatusHandler;

var _cryptoUtils = require("./cryptoUtils");

var _KeyPromiseQueue = require("./KeyPromiseQueue");

var _logger = require("./logger");

var _rest = _interopRequireDefault(require("./rest"));

var _Auth = _interopRequireDefault(require("./Auth"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PUSH_STATUS_COLLECTION = '_PushStatus';
const JOB_STATUS_COLLECTION = '_JobStatus';
const pushPromiseQueue = new _KeyPromiseQueue.KeyPromiseQueue();
const jobPromiseQueue = new _KeyPromiseQueue.KeyPromiseQueue();

const incrementOp = function (object = {}, key, amount = 1) {
  if (!object[key]) {
    object[key] = {
      __op: 'Increment',
      amount: amount
    };
  } else {
    object[key].amount += amount;
  }

  return object[key];
};

function flatten(array) {
  var flattened = [];

  for (var i = 0; i < array.length; i++) {
    if (Array.isArray(array[i])) {
      flattened = flattened.concat(flatten(array[i]));
    } else {
      flattened.push(array[i]);
    }
  }

  return flattened;
}

function statusHandler(className, database) {
  function create(object) {
    return database.create(className, object).then(() => {
      return Promise.resolve(object);
    });
  }

  function update(where, object) {
    return jobPromiseQueue.enqueue(where.objectId, () => database.update(className, where, object));
  }

  return Object.freeze({
    create,
    update
  });
}

function restStatusHandler(className, config) {
  const auth = _Auth.default.master(config);

  function create(object) {
    return _rest.default.create(config, auth, className, object).then(({
      response
    }) => {
      return _objectSpread(_objectSpread({}, object), response);
    });
  }

  function update(where, object) {
    return pushPromiseQueue.enqueue(where.objectId, () => _rest.default.update(config, auth, className, {
      objectId: where.objectId
    }, object).then(({
      response
    }) => {
      return _objectSpread(_objectSpread({}, object), response);
    }));
  }

  return Object.freeze({
    create,
    update
  });
}

function jobStatusHandler(config) {
  let jobStatus;
  const objectId = (0, _cryptoUtils.newObjectId)(config.objectIdSize);
  const database = config.database;
  const handler = statusHandler(JOB_STATUS_COLLECTION, database);

  const setRunning = function (jobName, params) {
    const now = new Date();
    jobStatus = {
      objectId,
      jobName,
      params,
      status: 'running',
      source: 'api',
      createdAt: now,
      // lockdown!
      ACL: {}
    };
    return handler.create(jobStatus);
  };

  const setMessage = function (message) {
    if (!message || typeof message !== 'string') {
      return Promise.resolve();
    }

    return handler.update({
      objectId
    }, {
      message
    });
  };

  const setSucceeded = function (message) {
    return setFinalStatus('succeeded', message);
  };

  const setFailed = function (message) {
    return setFinalStatus('failed', message);
  };

  const setFinalStatus = function (status, message = undefined) {
    const finishedAt = new Date();
    const update = {
      status,
      finishedAt
    };

    if (message && typeof message === 'string') {
      update.message = message;
    }

    if (message instanceof Error && typeof message.message === 'string') {
      update.message = message.message;
    }

    return handler.update({
      objectId
    }, update);
  };

  return Object.freeze({
    setRunning,
    setSucceeded,
    setMessage,
    setFailed
  });
}

function pushStatusHandler(config, existingObjectId) {
  let pushStatus;
  const database = config.database;
  const handler = restStatusHandler(PUSH_STATUS_COLLECTION, config);
  let objectId = existingObjectId;

  const setInitial = function (body = {}, where, options = {
    source: 'rest'
  }) {
    const now = new Date();
    let pushTime = now.toISOString();
    let status = 'pending';

    if (Object.prototype.hasOwnProperty.call(body, 'push_time')) {
      if (config.hasPushScheduledSupport) {
        pushTime = body.push_time;
        status = 'scheduled';
      } else {
        _logger.logger.warn('Trying to schedule a push while server is not configured.');

        _logger.logger.warn('Push will be sent immediately');
      }
    }

    const data = body.data || {};
    const payloadString = JSON.stringify(data);
    let pushHash;

    if (typeof data.alert === 'string') {
      pushHash = (0, _cryptoUtils.md5Hash)(data.alert);
    } else if (typeof data.alert === 'object') {
      pushHash = (0, _cryptoUtils.md5Hash)(JSON.stringify(data.alert));
    } else {
      pushHash = 'd41d8cd98f00b204e9800998ecf8427e';
    }

    const object = {
      pushTime,
      query: JSON.stringify(where),
      payload: payloadString,
      source: options.source,
      title: options.title,
      expiry: body.expiration_time,
      expiration_interval: body.expiration_interval,
      status: status,
      numSent: 0,
      pushHash,
      // lockdown!
      ACL: {}
    };
    return handler.create(object).then(result => {
      objectId = result.objectId;
      pushStatus = {
        objectId
      };
      return Promise.resolve(pushStatus);
    });
  };

  const setRunning = function (batches) {
    _logger.logger.verbose(`_PushStatus ${objectId}: sending push to installations with %d batches`, batches);

    return handler.update({
      status: 'pending',
      objectId: objectId
    }, {
      status: 'running',
      count: batches
    });
  };

  const trackSent = function (results, UTCOffset, cleanupInstallations = process.env.PARSE_SERVER_CLEANUP_INVALID_INSTALLATIONS) {
    const update = {
      numSent: 0,
      numFailed: 0
    };
    const devicesToRemove = [];

    if (Array.isArray(results)) {
      results = flatten(results);
      results.reduce((memo, result) => {
        // Cannot handle that
        if (!result || !result.device || !result.device.deviceType) {
          return memo;
        }

        const deviceType = result.device.deviceType;
        const key = result.transmitted ? `sentPerType.${deviceType}` : `failedPerType.${deviceType}`;
        memo[key] = incrementOp(memo, key);

        if (typeof UTCOffset !== 'undefined') {
          const offsetKey = result.transmitted ? `sentPerUTCOffset.${UTCOffset}` : `failedPerUTCOffset.${UTCOffset}`;
          memo[offsetKey] = incrementOp(memo, offsetKey);
        }

        if (result.transmitted) {
          memo.numSent++;
        } else {
          if (result && result.response && result.response.error && result.device && result.device.deviceToken) {
            const token = result.device.deviceToken;
            const error = result.response.error; // GCM errors

            if (error === 'NotRegistered' || error === 'InvalidRegistration') {
              devicesToRemove.push(token);
            } // APNS errors


            if (error === 'Unregistered' || error === 'BadDeviceToken') {
              devicesToRemove.push(token);
            }
          }

          memo.numFailed++;
        }

        return memo;
      }, update);
    }

    _logger.logger.verbose(`_PushStatus ${objectId}: sent push! %d success, %d failures`, update.numSent, update.numFailed);

    _logger.logger.verbose(`_PushStatus ${objectId}: needs cleanup`, {
      devicesToRemove
    });

    ['numSent', 'numFailed'].forEach(key => {
      if (update[key] > 0) {
        update[key] = {
          __op: 'Increment',
          amount: update[key]
        };
      } else {
        delete update[key];
      }
    });

    if (devicesToRemove.length > 0 && cleanupInstallations) {
      _logger.logger.info(`Removing device tokens on ${devicesToRemove.length} _Installations`);

      database.update('_Installation', {
        deviceToken: {
          $in: devicesToRemove
        }
      }, {
        deviceToken: {
          __op: 'Delete'
        }
      }, {
        acl: undefined,
        many: true
      });
    }

    incrementOp(update, 'count', -1);
    update.status = 'running';
    return handler.update({
      objectId
    }, update).then(res => {
      if (res && res.count === 0) {
        return this.complete();
      }
    });
  };

  const complete = function () {
    return handler.update({
      objectId
    }, {
      status: 'succeeded',
      count: {
        __op: 'Delete'
      }
    });
  };

  const fail = function (err) {
    if (typeof err === 'string') {
      err = {
        message: err
      };
    }

    const update = {
      errorMessage: err,
      status: 'failed'
    };
    return handler.update({
      objectId
    }, update);
  };

  const rval = {
    setInitial,
    setRunning,
    trackSent,
    complete,
    fail
  }; // define objectId to be dynamic

  Object.defineProperty(rval, 'objectId', {
    get: () => objectId
  });
  return Object.freeze(rval);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQVVNIX1NUQVRVU19DT0xMRUNUSU9OIiwiSk9CX1NUQVRVU19DT0xMRUNUSU9OIiwicHVzaFByb21pc2VRdWV1ZSIsIktleVByb21pc2VRdWV1ZSIsImpvYlByb21pc2VRdWV1ZSIsImluY3JlbWVudE9wIiwib2JqZWN0Iiwia2V5IiwiYW1vdW50IiwiX19vcCIsImZsYXR0ZW4iLCJhcnJheSIsImZsYXR0ZW5lZCIsImkiLCJsZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJwdXNoIiwic3RhdHVzSGFuZGxlciIsImNsYXNzTmFtZSIsImRhdGFiYXNlIiwiY3JlYXRlIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidXBkYXRlIiwid2hlcmUiLCJlbnF1ZXVlIiwib2JqZWN0SWQiLCJPYmplY3QiLCJmcmVlemUiLCJyZXN0U3RhdHVzSGFuZGxlciIsImNvbmZpZyIsImF1dGgiLCJBdXRoIiwibWFzdGVyIiwicmVzdCIsInJlc3BvbnNlIiwiam9iU3RhdHVzSGFuZGxlciIsImpvYlN0YXR1cyIsIm5ld09iamVjdElkIiwib2JqZWN0SWRTaXplIiwiaGFuZGxlciIsInNldFJ1bm5pbmciLCJqb2JOYW1lIiwicGFyYW1zIiwibm93IiwiRGF0ZSIsInN0YXR1cyIsInNvdXJjZSIsImNyZWF0ZWRBdCIsIkFDTCIsInNldE1lc3NhZ2UiLCJtZXNzYWdlIiwic2V0U3VjY2VlZGVkIiwic2V0RmluYWxTdGF0dXMiLCJzZXRGYWlsZWQiLCJ1bmRlZmluZWQiLCJmaW5pc2hlZEF0IiwiRXJyb3IiLCJwdXNoU3RhdHVzSGFuZGxlciIsImV4aXN0aW5nT2JqZWN0SWQiLCJwdXNoU3RhdHVzIiwic2V0SW5pdGlhbCIsImJvZHkiLCJvcHRpb25zIiwicHVzaFRpbWUiLCJ0b0lTT1N0cmluZyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhhc1B1c2hTY2hlZHVsZWRTdXBwb3J0IiwicHVzaF90aW1lIiwibG9nZ2VyIiwid2FybiIsImRhdGEiLCJwYXlsb2FkU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2hIYXNoIiwiYWxlcnQiLCJtZDVIYXNoIiwicXVlcnkiLCJwYXlsb2FkIiwidGl0bGUiLCJleHBpcnkiLCJleHBpcmF0aW9uX3RpbWUiLCJleHBpcmF0aW9uX2ludGVydmFsIiwibnVtU2VudCIsInJlc3VsdCIsImJhdGNoZXMiLCJ2ZXJib3NlIiwiY291bnQiLCJ0cmFja1NlbnQiLCJyZXN1bHRzIiwiVVRDT2Zmc2V0IiwiY2xlYW51cEluc3RhbGxhdGlvbnMiLCJwcm9jZXNzIiwiZW52IiwiUEFSU0VfU0VSVkVSX0NMRUFOVVBfSU5WQUxJRF9JTlNUQUxMQVRJT05TIiwibnVtRmFpbGVkIiwiZGV2aWNlc1RvUmVtb3ZlIiwicmVkdWNlIiwibWVtbyIsImRldmljZSIsImRldmljZVR5cGUiLCJ0cmFuc21pdHRlZCIsIm9mZnNldEtleSIsImVycm9yIiwiZGV2aWNlVG9rZW4iLCJ0b2tlbiIsImZvckVhY2giLCJpbmZvIiwiJGluIiwiYWNsIiwibWFueSIsInJlcyIsImNvbXBsZXRlIiwiZmFpbCIsImVyciIsImVycm9yTWVzc2FnZSIsInJ2YWwiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9TdGF0dXNIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1kNUhhc2gsIG5ld09iamVjdElkIH0gZnJvbSAnLi9jcnlwdG9VdGlscyc7XG5pbXBvcnQgeyBLZXlQcm9taXNlUXVldWUgfSBmcm9tICcuL0tleVByb21pc2VRdWV1ZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgcmVzdCBmcm9tICcuL3Jlc3QnO1xuaW1wb3J0IEF1dGggZnJvbSAnLi9BdXRoJztcblxuY29uc3QgUFVTSF9TVEFUVVNfQ09MTEVDVElPTiA9ICdfUHVzaFN0YXR1cyc7XG5jb25zdCBKT0JfU1RBVFVTX0NPTExFQ1RJT04gPSAnX0pvYlN0YXR1cyc7XG5cbmNvbnN0IHB1c2hQcm9taXNlUXVldWUgPSBuZXcgS2V5UHJvbWlzZVF1ZXVlKCk7XG5jb25zdCBqb2JQcm9taXNlUXVldWUgPSBuZXcgS2V5UHJvbWlzZVF1ZXVlKCk7XG5cbmNvbnN0IGluY3JlbWVudE9wID0gZnVuY3Rpb24gKG9iamVjdCA9IHt9LCBrZXksIGFtb3VudCA9IDEpIHtcbiAgaWYgKCFvYmplY3Rba2V5XSkge1xuICAgIG9iamVjdFtrZXldID0geyBfX29wOiAnSW5jcmVtZW50JywgYW1vdW50OiBhbW91bnQgfTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XS5hbW91bnQgKz0gYW1vdW50O1xuICB9XG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gIHZhciBmbGF0dGVuZWQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5W2ldKSkge1xuICAgICAgZmxhdHRlbmVkID0gZmxhdHRlbmVkLmNvbmNhdChmbGF0dGVuKGFycmF5W2ldKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsYXR0ZW5lZC5wdXNoKGFycmF5W2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZsYXR0ZW5lZDtcbn1cblxuZnVuY3Rpb24gc3RhdHVzSGFuZGxlcihjbGFzc05hbWUsIGRhdGFiYXNlKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShvYmplY3QpIHtcbiAgICByZXR1cm4gZGF0YWJhc2UuY3JlYXRlKGNsYXNzTmFtZSwgb2JqZWN0KS50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob2JqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSh3aGVyZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGpvYlByb21pc2VRdWV1ZS5lbnF1ZXVlKHdoZXJlLm9iamVjdElkLCAoKSA9PiBkYXRhYmFzZS51cGRhdGUoY2xhc3NOYW1lLCB3aGVyZSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgY3JlYXRlLFxuICAgIHVwZGF0ZSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc3RTdGF0dXNIYW5kbGVyKGNsYXNzTmFtZSwgY29uZmlnKSB7XG4gIGNvbnN0IGF1dGggPSBBdXRoLm1hc3Rlcihjb25maWcpO1xuICBmdW5jdGlvbiBjcmVhdGUob2JqZWN0KSB7XG4gICAgcmV0dXJuIHJlc3QuY3JlYXRlKGNvbmZpZywgYXV0aCwgY2xhc3NOYW1lLCBvYmplY3QpLnRoZW4oKHsgcmVzcG9uc2UgfSkgPT4ge1xuICAgICAgcmV0dXJuIHsgLi4ub2JqZWN0LCAuLi5yZXNwb25zZSB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKHdoZXJlLCBvYmplY3QpIHtcbiAgICByZXR1cm4gcHVzaFByb21pc2VRdWV1ZS5lbnF1ZXVlKHdoZXJlLm9iamVjdElkLCAoKSA9PlxuICAgICAgcmVzdFxuICAgICAgICAudXBkYXRlKGNvbmZpZywgYXV0aCwgY2xhc3NOYW1lLCB7IG9iamVjdElkOiB3aGVyZS5vYmplY3RJZCB9LCBvYmplY3QpXG4gICAgICAgIC50aGVuKCh7IHJlc3BvbnNlIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4geyAuLi5vYmplY3QsIC4uLnJlc3BvbnNlIH07XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICBjcmVhdGUsXG4gICAgdXBkYXRlLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvYlN0YXR1c0hhbmRsZXIoY29uZmlnKSB7XG4gIGxldCBqb2JTdGF0dXM7XG4gIGNvbnN0IG9iamVjdElkID0gbmV3T2JqZWN0SWQoY29uZmlnLm9iamVjdElkU2l6ZSk7XG4gIGNvbnN0IGRhdGFiYXNlID0gY29uZmlnLmRhdGFiYXNlO1xuICBjb25zdCBoYW5kbGVyID0gc3RhdHVzSGFuZGxlcihKT0JfU1RBVFVTX0NPTExFQ1RJT04sIGRhdGFiYXNlKTtcbiAgY29uc3Qgc2V0UnVubmluZyA9IGZ1bmN0aW9uIChqb2JOYW1lLCBwYXJhbXMpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGpvYlN0YXR1cyA9IHtcbiAgICAgIG9iamVjdElkLFxuICAgICAgam9iTmFtZSxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHN0YXR1czogJ3J1bm5pbmcnLFxuICAgICAgc291cmNlOiAnYXBpJyxcbiAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgLy8gbG9ja2Rvd24hXG4gICAgICBBQ0w6IHt9LFxuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlci5jcmVhdGUoam9iU3RhdHVzKTtcbiAgfTtcblxuICBjb25zdCBzZXRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBpZiAoIW1lc3NhZ2UgfHwgdHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVyLnVwZGF0ZSh7IG9iamVjdElkIH0sIHsgbWVzc2FnZSB9KTtcbiAgfTtcblxuICBjb25zdCBzZXRTdWNjZWVkZWQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHJldHVybiBzZXRGaW5hbFN0YXR1cygnc3VjY2VlZGVkJywgbWVzc2FnZSk7XG4gIH07XG5cbiAgY29uc3Qgc2V0RmFpbGVkID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gc2V0RmluYWxTdGF0dXMoJ2ZhaWxlZCcsIG1lc3NhZ2UpO1xuICB9O1xuXG4gIGNvbnN0IHNldEZpbmFsU3RhdHVzID0gZnVuY3Rpb24gKHN0YXR1cywgbWVzc2FnZSA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGZpbmlzaGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHVwZGF0ZSA9IHsgc3RhdHVzLCBmaW5pc2hlZEF0IH07XG4gICAgaWYgKG1lc3NhZ2UgJiYgdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICB1cGRhdGUubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IgJiYgdHlwZW9mIG1lc3NhZ2UubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHVwZGF0ZS5tZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlci51cGRhdGUoeyBvYmplY3RJZCB9LCB1cGRhdGUpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICBzZXRSdW5uaW5nLFxuICAgIHNldFN1Y2NlZWRlZCxcbiAgICBzZXRNZXNzYWdlLFxuICAgIHNldEZhaWxlZCxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXNoU3RhdHVzSGFuZGxlcihjb25maWcsIGV4aXN0aW5nT2JqZWN0SWQpIHtcbiAgbGV0IHB1c2hTdGF0dXM7XG4gIGNvbnN0IGRhdGFiYXNlID0gY29uZmlnLmRhdGFiYXNlO1xuICBjb25zdCBoYW5kbGVyID0gcmVzdFN0YXR1c0hhbmRsZXIoUFVTSF9TVEFUVVNfQ09MTEVDVElPTiwgY29uZmlnKTtcbiAgbGV0IG9iamVjdElkID0gZXhpc3RpbmdPYmplY3RJZDtcbiAgY29uc3Qgc2V0SW5pdGlhbCA9IGZ1bmN0aW9uIChib2R5ID0ge30sIHdoZXJlLCBvcHRpb25zID0geyBzb3VyY2U6ICdyZXN0JyB9KSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgcHVzaFRpbWUgPSBub3cudG9JU09TdHJpbmcoKTtcbiAgICBsZXQgc3RhdHVzID0gJ3BlbmRpbmcnO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYm9keSwgJ3B1c2hfdGltZScpKSB7XG4gICAgICBpZiAoY29uZmlnLmhhc1B1c2hTY2hlZHVsZWRTdXBwb3J0KSB7XG4gICAgICAgIHB1c2hUaW1lID0gYm9keS5wdXNoX3RpbWU7XG4gICAgICAgIHN0YXR1cyA9ICdzY2hlZHVsZWQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1RyeWluZyB0byBzY2hlZHVsZSBhIHB1c2ggd2hpbGUgc2VydmVyIGlzIG5vdCBjb25maWd1cmVkLicpO1xuICAgICAgICBsb2dnZXIud2FybignUHVzaCB3aWxsIGJlIHNlbnQgaW1tZWRpYXRlbHknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYm9keS5kYXRhIHx8IHt9O1xuICAgIGNvbnN0IHBheWxvYWRTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICBsZXQgcHVzaEhhc2g7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmFsZXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgcHVzaEhhc2ggPSBtZDVIYXNoKGRhdGEuYWxlcnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEuYWxlcnQgPT09ICdvYmplY3QnKSB7XG4gICAgICBwdXNoSGFzaCA9IG1kNUhhc2goSlNPTi5zdHJpbmdpZnkoZGF0YS5hbGVydCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoSGFzaCA9ICdkNDFkOGNkOThmMDBiMjA0ZTk4MDA5OThlY2Y4NDI3ZSc7XG4gICAgfVxuICAgIGNvbnN0IG9iamVjdCA9IHtcbiAgICAgIHB1c2hUaW1lLFxuICAgICAgcXVlcnk6IEpTT04uc3RyaW5naWZ5KHdoZXJlKSxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWRTdHJpbmcsXG4gICAgICBzb3VyY2U6IG9wdGlvbnMuc291cmNlLFxuICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUsXG4gICAgICBleHBpcnk6IGJvZHkuZXhwaXJhdGlvbl90aW1lLFxuICAgICAgZXhwaXJhdGlvbl9pbnRlcnZhbDogYm9keS5leHBpcmF0aW9uX2ludGVydmFsLFxuICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICBudW1TZW50OiAwLFxuICAgICAgcHVzaEhhc2gsXG4gICAgICAvLyBsb2NrZG93biFcbiAgICAgIEFDTDoge30sXG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlci5jcmVhdGUob2JqZWN0KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBvYmplY3RJZCA9IHJlc3VsdC5vYmplY3RJZDtcbiAgICAgIHB1c2hTdGF0dXMgPSB7XG4gICAgICAgIG9iamVjdElkLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocHVzaFN0YXR1cyk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2V0UnVubmluZyA9IGZ1bmN0aW9uIChiYXRjaGVzKSB7XG4gICAgbG9nZ2VyLnZlcmJvc2UoXG4gICAgICBgX1B1c2hTdGF0dXMgJHtvYmplY3RJZH06IHNlbmRpbmcgcHVzaCB0byBpbnN0YWxsYXRpb25zIHdpdGggJWQgYmF0Y2hlc2AsXG4gICAgICBiYXRjaGVzXG4gICAgKTtcbiAgICByZXR1cm4gaGFuZGxlci51cGRhdGUoXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBvYmplY3RJZDogb2JqZWN0SWQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgICAgY291bnQ6IGJhdGNoZXMsXG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCB0cmFja1NlbnQgPSBmdW5jdGlvbiAoXG4gICAgcmVzdWx0cyxcbiAgICBVVENPZmZzZXQsXG4gICAgY2xlYW51cEluc3RhbGxhdGlvbnMgPSBwcm9jZXNzLmVudi5QQVJTRV9TRVJWRVJfQ0xFQU5VUF9JTlZBTElEX0lOU1RBTExBVElPTlNcbiAgKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge1xuICAgICAgbnVtU2VudDogMCxcbiAgICAgIG51bUZhaWxlZDogMCxcbiAgICB9O1xuICAgIGNvbnN0IGRldmljZXNUb1JlbW92ZSA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICByZXN1bHRzID0gZmxhdHRlbihyZXN1bHRzKTtcbiAgICAgIHJlc3VsdHMucmVkdWNlKChtZW1vLCByZXN1bHQpID0+IHtcbiAgICAgICAgLy8gQ2Fubm90IGhhbmRsZSB0aGF0XG4gICAgICAgIGlmICghcmVzdWx0IHx8ICFyZXN1bHQuZGV2aWNlIHx8ICFyZXN1bHQuZGV2aWNlLmRldmljZVR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXZpY2VUeXBlID0gcmVzdWx0LmRldmljZS5kZXZpY2VUeXBlO1xuICAgICAgICBjb25zdCBrZXkgPSByZXN1bHQudHJhbnNtaXR0ZWRcbiAgICAgICAgICA/IGBzZW50UGVyVHlwZS4ke2RldmljZVR5cGV9YFxuICAgICAgICAgIDogYGZhaWxlZFBlclR5cGUuJHtkZXZpY2VUeXBlfWA7XG4gICAgICAgIG1lbW9ba2V5XSA9IGluY3JlbWVudE9wKG1lbW8sIGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgVVRDT2Zmc2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IG9mZnNldEtleSA9IHJlc3VsdC50cmFuc21pdHRlZFxuICAgICAgICAgICAgPyBgc2VudFBlclVUQ09mZnNldC4ke1VUQ09mZnNldH1gXG4gICAgICAgICAgICA6IGBmYWlsZWRQZXJVVENPZmZzZXQuJHtVVENPZmZzZXR9YDtcbiAgICAgICAgICBtZW1vW29mZnNldEtleV0gPSBpbmNyZW1lbnRPcChtZW1vLCBvZmZzZXRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQudHJhbnNtaXR0ZWQpIHtcbiAgICAgICAgICBtZW1vLm51bVNlbnQrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXN1bHQgJiZcbiAgICAgICAgICAgIHJlc3VsdC5yZXNwb25zZSAmJlxuICAgICAgICAgICAgcmVzdWx0LnJlc3BvbnNlLmVycm9yICYmXG4gICAgICAgICAgICByZXN1bHQuZGV2aWNlICYmXG4gICAgICAgICAgICByZXN1bHQuZGV2aWNlLmRldmljZVRva2VuXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHJlc3VsdC5kZXZpY2UuZGV2aWNlVG9rZW47XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlc3VsdC5yZXNwb25zZS5lcnJvcjtcbiAgICAgICAgICAgIC8vIEdDTSBlcnJvcnNcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gJ05vdFJlZ2lzdGVyZWQnIHx8IGVycm9yID09PSAnSW52YWxpZFJlZ2lzdHJhdGlvbicpIHtcbiAgICAgICAgICAgICAgZGV2aWNlc1RvUmVtb3ZlLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQVBOUyBlcnJvcnNcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gJ1VucmVnaXN0ZXJlZCcgfHwgZXJyb3IgPT09ICdCYWREZXZpY2VUb2tlbicpIHtcbiAgICAgICAgICAgICAgZGV2aWNlc1RvUmVtb3ZlLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZW1vLm51bUZhaWxlZCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwgdXBkYXRlKTtcbiAgICB9XG5cbiAgICBsb2dnZXIudmVyYm9zZShcbiAgICAgIGBfUHVzaFN0YXR1cyAke29iamVjdElkfTogc2VudCBwdXNoISAlZCBzdWNjZXNzLCAlZCBmYWlsdXJlc2AsXG4gICAgICB1cGRhdGUubnVtU2VudCxcbiAgICAgIHVwZGF0ZS5udW1GYWlsZWRcbiAgICApO1xuICAgIGxvZ2dlci52ZXJib3NlKGBfUHVzaFN0YXR1cyAke29iamVjdElkfTogbmVlZHMgY2xlYW51cGAsIHtcbiAgICAgIGRldmljZXNUb1JlbW92ZSxcbiAgICB9KTtcbiAgICBbJ251bVNlbnQnLCAnbnVtRmFpbGVkJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZVtrZXldID4gMCkge1xuICAgICAgICB1cGRhdGVba2V5XSA9IHtcbiAgICAgICAgICBfX29wOiAnSW5jcmVtZW50JyxcbiAgICAgICAgICBhbW91bnQ6IHVwZGF0ZVtrZXldLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHVwZGF0ZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGRldmljZXNUb1JlbW92ZS5sZW5ndGggPiAwICYmIGNsZWFudXBJbnN0YWxsYXRpb25zKSB7XG4gICAgICBsb2dnZXIuaW5mbyhgUmVtb3ZpbmcgZGV2aWNlIHRva2VucyBvbiAke2RldmljZXNUb1JlbW92ZS5sZW5ndGh9IF9JbnN0YWxsYXRpb25zYCk7XG4gICAgICBkYXRhYmFzZS51cGRhdGUoXG4gICAgICAgICdfSW5zdGFsbGF0aW9uJyxcbiAgICAgICAgeyBkZXZpY2VUb2tlbjogeyAkaW46IGRldmljZXNUb1JlbW92ZSB9IH0sXG4gICAgICAgIHsgZGV2aWNlVG9rZW46IHsgX19vcDogJ0RlbGV0ZScgfSB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWNsOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWFueTogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgaW5jcmVtZW50T3AodXBkYXRlLCAnY291bnQnLCAtMSk7XG4gICAgdXBkYXRlLnN0YXR1cyA9ICdydW5uaW5nJztcblxuICAgIHJldHVybiBoYW5kbGVyLnVwZGF0ZSh7IG9iamVjdElkIH0sIHVwZGF0ZSkudGhlbihyZXMgPT4ge1xuICAgICAgaWYgKHJlcyAmJiByZXMuY291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGFuZGxlci51cGRhdGUoXG4gICAgICB7IG9iamVjdElkIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogJ3N1Y2NlZWRlZCcsXG4gICAgICAgIGNvdW50OiB7IF9fb3A6ICdEZWxldGUnIH0sXG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBmYWlsID0gZnVuY3Rpb24gKGVycikge1xuICAgIGlmICh0eXBlb2YgZXJyID09PSAnc3RyaW5nJykge1xuICAgICAgZXJyID0geyBtZXNzYWdlOiBlcnIgfTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlID0ge1xuICAgICAgZXJyb3JNZXNzYWdlOiBlcnIsXG4gICAgICBzdGF0dXM6ICdmYWlsZWQnLFxuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZXIudXBkYXRlKHsgb2JqZWN0SWQgfSwgdXBkYXRlKTtcbiAgfTtcblxuICBjb25zdCBydmFsID0ge1xuICAgIHNldEluaXRpYWwsXG4gICAgc2V0UnVubmluZyxcbiAgICB0cmFja1NlbnQsXG4gICAgY29tcGxldGUsXG4gICAgZmFpbCxcbiAgfTtcblxuICAvLyBkZWZpbmUgb2JqZWN0SWQgdG8gYmUgZHluYW1pY1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocnZhbCwgJ29iamVjdElkJywge1xuICAgIGdldDogKCkgPT4gb2JqZWN0SWQsXG4gIH0pO1xuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKHJ2YWwpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUVBLE1BQU1BLHNCQUFzQixHQUFHLGFBQS9CO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsWUFBOUI7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxnQ0FBSixFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBRyxJQUFJRCxnQ0FBSixFQUF4Qjs7QUFFQSxNQUFNRSxXQUFXLEdBQUcsVUFBVUMsTUFBTSxHQUFHLEVBQW5CLEVBQXVCQyxHQUF2QixFQUE0QkMsTUFBTSxHQUFHLENBQXJDLEVBQXdDO0VBQzFELElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxHQUFELENBQVgsRUFBa0I7SUFDaEJELE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLEdBQWM7TUFBRUUsSUFBSSxFQUFFLFdBQVI7TUFBcUJELE1BQU0sRUFBRUE7SUFBN0IsQ0FBZDtFQUNELENBRkQsTUFFTztJQUNMRixNQUFNLENBQUNDLEdBQUQsQ0FBTixDQUFZQyxNQUFaLElBQXNCQSxNQUF0QjtFQUNEOztFQUNELE9BQU9GLE1BQU0sQ0FBQ0MsR0FBRCxDQUFiO0FBQ0QsQ0FQRDs7QUFTTyxTQUFTRyxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtFQUM3QixJQUFJQyxTQUFTLEdBQUcsRUFBaEI7O0VBQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixLQUFLLENBQUNHLE1BQTFCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0lBQ3JDLElBQUlFLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxLQUFLLENBQUNFLENBQUQsQ0FBbkIsQ0FBSixFQUE2QjtNQUMzQkQsU0FBUyxHQUFHQSxTQUFTLENBQUNLLE1BQVYsQ0FBaUJQLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRSxDQUFELENBQU4sQ0FBeEIsQ0FBWjtJQUNELENBRkQsTUFFTztNQUNMRCxTQUFTLENBQUNNLElBQVYsQ0FBZVAsS0FBSyxDQUFDRSxDQUFELENBQXBCO0lBQ0Q7RUFDRjs7RUFDRCxPQUFPRCxTQUFQO0FBQ0Q7O0FBRUQsU0FBU08sYUFBVCxDQUF1QkMsU0FBdkIsRUFBa0NDLFFBQWxDLEVBQTRDO0VBQzFDLFNBQVNDLE1BQVQsQ0FBZ0JoQixNQUFoQixFQUF3QjtJQUN0QixPQUFPZSxRQUFRLENBQUNDLE1BQVQsQ0FBZ0JGLFNBQWhCLEVBQTJCZCxNQUEzQixFQUFtQ2lCLElBQW5DLENBQXdDLE1BQU07TUFDbkQsT0FBT0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCbkIsTUFBaEIsQ0FBUDtJQUNELENBRk0sQ0FBUDtFQUdEOztFQUVELFNBQVNvQixNQUFULENBQWdCQyxLQUFoQixFQUF1QnJCLE1BQXZCLEVBQStCO0lBQzdCLE9BQU9GLGVBQWUsQ0FBQ3dCLE9BQWhCLENBQXdCRCxLQUFLLENBQUNFLFFBQTlCLEVBQXdDLE1BQU1SLFFBQVEsQ0FBQ0ssTUFBVCxDQUFnQk4sU0FBaEIsRUFBMkJPLEtBQTNCLEVBQWtDckIsTUFBbEMsQ0FBOUMsQ0FBUDtFQUNEOztFQUVELE9BQU93QixNQUFNLENBQUNDLE1BQVAsQ0FBYztJQUNuQlQsTUFEbUI7SUFFbkJJO0VBRm1CLENBQWQsQ0FBUDtBQUlEOztBQUVELFNBQVNNLGlCQUFULENBQTJCWixTQUEzQixFQUFzQ2EsTUFBdEMsRUFBOEM7RUFDNUMsTUFBTUMsSUFBSSxHQUFHQyxhQUFBLENBQUtDLE1BQUwsQ0FBWUgsTUFBWixDQUFiOztFQUNBLFNBQVNYLE1BQVQsQ0FBZ0JoQixNQUFoQixFQUF3QjtJQUN0QixPQUFPK0IsYUFBQSxDQUFLZixNQUFMLENBQVlXLE1BQVosRUFBb0JDLElBQXBCLEVBQTBCZCxTQUExQixFQUFxQ2QsTUFBckMsRUFBNkNpQixJQUE3QyxDQUFrRCxDQUFDO01BQUVlO0lBQUYsQ0FBRCxLQUFrQjtNQUN6RSx1Q0FBWWhDLE1BQVosR0FBdUJnQyxRQUF2QjtJQUNELENBRk0sQ0FBUDtFQUdEOztFQUVELFNBQVNaLE1BQVQsQ0FBZ0JDLEtBQWhCLEVBQXVCckIsTUFBdkIsRUFBK0I7SUFDN0IsT0FBT0osZ0JBQWdCLENBQUMwQixPQUFqQixDQUF5QkQsS0FBSyxDQUFDRSxRQUEvQixFQUF5QyxNQUM5Q1EsYUFBQSxDQUNHWCxNQURILENBQ1VPLE1BRFYsRUFDa0JDLElBRGxCLEVBQ3dCZCxTQUR4QixFQUNtQztNQUFFUyxRQUFRLEVBQUVGLEtBQUssQ0FBQ0U7SUFBbEIsQ0FEbkMsRUFDaUV2QixNQURqRSxFQUVHaUIsSUFGSCxDQUVRLENBQUM7TUFBRWU7SUFBRixDQUFELEtBQWtCO01BQ3RCLHVDQUFZaEMsTUFBWixHQUF1QmdDLFFBQXZCO0lBQ0QsQ0FKSCxDQURLLENBQVA7RUFPRDs7RUFFRCxPQUFPUixNQUFNLENBQUNDLE1BQVAsQ0FBYztJQUNuQlQsTUFEbUI7SUFFbkJJO0VBRm1CLENBQWQsQ0FBUDtBQUlEOztBQUVNLFNBQVNhLGdCQUFULENBQTBCTixNQUExQixFQUFrQztFQUN2QyxJQUFJTyxTQUFKO0VBQ0EsTUFBTVgsUUFBUSxHQUFHLElBQUFZLHdCQUFBLEVBQVlSLE1BQU0sQ0FBQ1MsWUFBbkIsQ0FBakI7RUFDQSxNQUFNckIsUUFBUSxHQUFHWSxNQUFNLENBQUNaLFFBQXhCO0VBQ0EsTUFBTXNCLE9BQU8sR0FBR3hCLGFBQWEsQ0FBQ2xCLHFCQUFELEVBQXdCb0IsUUFBeEIsQ0FBN0I7O0VBQ0EsTUFBTXVCLFVBQVUsR0FBRyxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtJQUM1QyxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsSUFBSixFQUFaO0lBQ0FSLFNBQVMsR0FBRztNQUNWWCxRQURVO01BRVZnQixPQUZVO01BR1ZDLE1BSFU7TUFJVkcsTUFBTSxFQUFFLFNBSkU7TUFLVkMsTUFBTSxFQUFFLEtBTEU7TUFNVkMsU0FBUyxFQUFFSixHQU5EO01BT1Y7TUFDQUssR0FBRyxFQUFFO0lBUkssQ0FBWjtJQVdBLE9BQU9ULE9BQU8sQ0FBQ3JCLE1BQVIsQ0FBZWtCLFNBQWYsQ0FBUDtFQUNELENBZEQ7O0VBZ0JBLE1BQU1hLFVBQVUsR0FBRyxVQUFVQyxPQUFWLEVBQW1CO0lBQ3BDLElBQUksQ0FBQ0EsT0FBRCxJQUFZLE9BQU9BLE9BQVAsS0FBbUIsUUFBbkMsRUFBNkM7TUFDM0MsT0FBTzlCLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0lBQ0Q7O0lBQ0QsT0FBT2tCLE9BQU8sQ0FBQ2pCLE1BQVIsQ0FBZTtNQUFFRztJQUFGLENBQWYsRUFBNkI7TUFBRXlCO0lBQUYsQ0FBN0IsQ0FBUDtFQUNELENBTEQ7O0VBT0EsTUFBTUMsWUFBWSxHQUFHLFVBQVVELE9BQVYsRUFBbUI7SUFDdEMsT0FBT0UsY0FBYyxDQUFDLFdBQUQsRUFBY0YsT0FBZCxDQUFyQjtFQUNELENBRkQ7O0VBSUEsTUFBTUcsU0FBUyxHQUFHLFVBQVVILE9BQVYsRUFBbUI7SUFDbkMsT0FBT0UsY0FBYyxDQUFDLFFBQUQsRUFBV0YsT0FBWCxDQUFyQjtFQUNELENBRkQ7O0VBSUEsTUFBTUUsY0FBYyxHQUFHLFVBQVVQLE1BQVYsRUFBa0JLLE9BQU8sR0FBR0ksU0FBNUIsRUFBdUM7SUFDNUQsTUFBTUMsVUFBVSxHQUFHLElBQUlYLElBQUosRUFBbkI7SUFDQSxNQUFNdEIsTUFBTSxHQUFHO01BQUV1QixNQUFGO01BQVVVO0lBQVYsQ0FBZjs7SUFDQSxJQUFJTCxPQUFPLElBQUksT0FBT0EsT0FBUCxLQUFtQixRQUFsQyxFQUE0QztNQUMxQzVCLE1BQU0sQ0FBQzRCLE9BQVAsR0FBaUJBLE9BQWpCO0lBQ0Q7O0lBQ0QsSUFBSUEsT0FBTyxZQUFZTSxLQUFuQixJQUE0QixPQUFPTixPQUFPLENBQUNBLE9BQWYsS0FBMkIsUUFBM0QsRUFBcUU7TUFDbkU1QixNQUFNLENBQUM0QixPQUFQLEdBQWlCQSxPQUFPLENBQUNBLE9BQXpCO0lBQ0Q7O0lBQ0QsT0FBT1gsT0FBTyxDQUFDakIsTUFBUixDQUFlO01BQUVHO0lBQUYsQ0FBZixFQUE2QkgsTUFBN0IsQ0FBUDtFQUNELENBVkQ7O0VBWUEsT0FBT0ksTUFBTSxDQUFDQyxNQUFQLENBQWM7SUFDbkJhLFVBRG1CO0lBRW5CVyxZQUZtQjtJQUduQkYsVUFIbUI7SUFJbkJJO0VBSm1CLENBQWQsQ0FBUDtBQU1EOztBQUVNLFNBQVNJLGlCQUFULENBQTJCNUIsTUFBM0IsRUFBbUM2QixnQkFBbkMsRUFBcUQ7RUFDMUQsSUFBSUMsVUFBSjtFQUNBLE1BQU0xQyxRQUFRLEdBQUdZLE1BQU0sQ0FBQ1osUUFBeEI7RUFDQSxNQUFNc0IsT0FBTyxHQUFHWCxpQkFBaUIsQ0FBQ2hDLHNCQUFELEVBQXlCaUMsTUFBekIsQ0FBakM7RUFDQSxJQUFJSixRQUFRLEdBQUdpQyxnQkFBZjs7RUFDQSxNQUFNRSxVQUFVLEdBQUcsVUFBVUMsSUFBSSxHQUFHLEVBQWpCLEVBQXFCdEMsS0FBckIsRUFBNEJ1QyxPQUFPLEdBQUc7SUFBRWhCLE1BQU0sRUFBRTtFQUFWLENBQXRDLEVBQTBEO0lBQzNFLE1BQU1ILEdBQUcsR0FBRyxJQUFJQyxJQUFKLEVBQVo7SUFDQSxJQUFJbUIsUUFBUSxHQUFHcEIsR0FBRyxDQUFDcUIsV0FBSixFQUFmO0lBQ0EsSUFBSW5CLE1BQU0sR0FBRyxTQUFiOztJQUNBLElBQUluQixNQUFNLENBQUN1QyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNOLElBQXJDLEVBQTJDLFdBQTNDLENBQUosRUFBNkQ7TUFDM0QsSUFBSWhDLE1BQU0sQ0FBQ3VDLHVCQUFYLEVBQW9DO1FBQ2xDTCxRQUFRLEdBQUdGLElBQUksQ0FBQ1EsU0FBaEI7UUFDQXhCLE1BQU0sR0FBRyxXQUFUO01BQ0QsQ0FIRCxNQUdPO1FBQ0x5QixjQUFBLENBQU9DLElBQVAsQ0FBWSwyREFBWjs7UUFDQUQsY0FBQSxDQUFPQyxJQUFQLENBQVksK0JBQVo7TUFDRDtJQUNGOztJQUVELE1BQU1DLElBQUksR0FBR1gsSUFBSSxDQUFDVyxJQUFMLElBQWEsRUFBMUI7SUFDQSxNQUFNQyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxJQUFmLENBQXRCO0lBQ0EsSUFBSUksUUFBSjs7SUFDQSxJQUFJLE9BQU9KLElBQUksQ0FBQ0ssS0FBWixLQUFzQixRQUExQixFQUFvQztNQUNsQ0QsUUFBUSxHQUFHLElBQUFFLG9CQUFBLEVBQVFOLElBQUksQ0FBQ0ssS0FBYixDQUFYO0lBQ0QsQ0FGRCxNQUVPLElBQUksT0FBT0wsSUFBSSxDQUFDSyxLQUFaLEtBQXNCLFFBQTFCLEVBQW9DO01BQ3pDRCxRQUFRLEdBQUcsSUFBQUUsb0JBQUEsRUFBUUosSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQUksQ0FBQ0ssS0FBcEIsQ0FBUixDQUFYO0lBQ0QsQ0FGTSxNQUVBO01BQ0xELFFBQVEsR0FBRyxrQ0FBWDtJQUNEOztJQUNELE1BQU0xRSxNQUFNLEdBQUc7TUFDYjZELFFBRGE7TUFFYmdCLEtBQUssRUFBRUwsSUFBSSxDQUFDQyxTQUFMLENBQWVwRCxLQUFmLENBRk07TUFHYnlELE9BQU8sRUFBRVAsYUFISTtNQUliM0IsTUFBTSxFQUFFZ0IsT0FBTyxDQUFDaEIsTUFKSDtNQUtibUMsS0FBSyxFQUFFbkIsT0FBTyxDQUFDbUIsS0FMRjtNQU1iQyxNQUFNLEVBQUVyQixJQUFJLENBQUNzQixlQU5BO01BT2JDLG1CQUFtQixFQUFFdkIsSUFBSSxDQUFDdUIsbUJBUGI7TUFRYnZDLE1BQU0sRUFBRUEsTUFSSztNQVNid0MsT0FBTyxFQUFFLENBVEk7TUFVYlQsUUFWYTtNQVdiO01BQ0E1QixHQUFHLEVBQUU7SUFaUSxDQUFmO0lBY0EsT0FBT1QsT0FBTyxDQUFDckIsTUFBUixDQUFlaEIsTUFBZixFQUF1QmlCLElBQXZCLENBQTRCbUUsTUFBTSxJQUFJO01BQzNDN0QsUUFBUSxHQUFHNkQsTUFBTSxDQUFDN0QsUUFBbEI7TUFDQWtDLFVBQVUsR0FBRztRQUNYbEM7TUFEVyxDQUFiO01BR0EsT0FBT0wsT0FBTyxDQUFDQyxPQUFSLENBQWdCc0MsVUFBaEIsQ0FBUDtJQUNELENBTk0sQ0FBUDtFQU9ELENBN0NEOztFQStDQSxNQUFNbkIsVUFBVSxHQUFHLFVBQVUrQyxPQUFWLEVBQW1CO0lBQ3BDakIsY0FBQSxDQUFPa0IsT0FBUCxDQUNHLGVBQWMvRCxRQUFTLGlEQUQxQixFQUVFOEQsT0FGRjs7SUFJQSxPQUFPaEQsT0FBTyxDQUFDakIsTUFBUixDQUNMO01BQ0V1QixNQUFNLEVBQUUsU0FEVjtNQUVFcEIsUUFBUSxFQUFFQTtJQUZaLENBREssRUFLTDtNQUNFb0IsTUFBTSxFQUFFLFNBRFY7TUFFRTRDLEtBQUssRUFBRUY7SUFGVCxDQUxLLENBQVA7RUFVRCxDQWZEOztFQWlCQSxNQUFNRyxTQUFTLEdBQUcsVUFDaEJDLE9BRGdCLEVBRWhCQyxTQUZnQixFQUdoQkMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQywwQ0FIbkIsRUFJaEI7SUFDQSxNQUFNMUUsTUFBTSxHQUFHO01BQ2IrRCxPQUFPLEVBQUUsQ0FESTtNQUViWSxTQUFTLEVBQUU7SUFGRSxDQUFmO0lBSUEsTUFBTUMsZUFBZSxHQUFHLEVBQXhCOztJQUNBLElBQUl2RixLQUFLLENBQUNDLE9BQU4sQ0FBYytFLE9BQWQsQ0FBSixFQUE0QjtNQUMxQkEsT0FBTyxHQUFHckYsT0FBTyxDQUFDcUYsT0FBRCxDQUFqQjtNQUNBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZSxDQUFDQyxJQUFELEVBQU9kLE1BQVAsS0FBa0I7UUFDL0I7UUFDQSxJQUFJLENBQUNBLE1BQUQsSUFBVyxDQUFDQSxNQUFNLENBQUNlLE1BQW5CLElBQTZCLENBQUNmLE1BQU0sQ0FBQ2UsTUFBUCxDQUFjQyxVQUFoRCxFQUE0RDtVQUMxRCxPQUFPRixJQUFQO1FBQ0Q7O1FBQ0QsTUFBTUUsVUFBVSxHQUFHaEIsTUFBTSxDQUFDZSxNQUFQLENBQWNDLFVBQWpDO1FBQ0EsTUFBTW5HLEdBQUcsR0FBR21GLE1BQU0sQ0FBQ2lCLFdBQVAsR0FDUCxlQUFjRCxVQUFXLEVBRGxCLEdBRVAsaUJBQWdCQSxVQUFXLEVBRmhDO1FBR0FGLElBQUksQ0FBQ2pHLEdBQUQsQ0FBSixHQUFZRixXQUFXLENBQUNtRyxJQUFELEVBQU9qRyxHQUFQLENBQXZCOztRQUNBLElBQUksT0FBT3lGLFNBQVAsS0FBcUIsV0FBekIsRUFBc0M7VUFDcEMsTUFBTVksU0FBUyxHQUFHbEIsTUFBTSxDQUFDaUIsV0FBUCxHQUNiLG9CQUFtQlgsU0FBVSxFQURoQixHQUViLHNCQUFxQkEsU0FBVSxFQUZwQztVQUdBUSxJQUFJLENBQUNJLFNBQUQsQ0FBSixHQUFrQnZHLFdBQVcsQ0FBQ21HLElBQUQsRUFBT0ksU0FBUCxDQUE3QjtRQUNEOztRQUNELElBQUlsQixNQUFNLENBQUNpQixXQUFYLEVBQXdCO1VBQ3RCSCxJQUFJLENBQUNmLE9BQUw7UUFDRCxDQUZELE1BRU87VUFDTCxJQUNFQyxNQUFNLElBQ05BLE1BQU0sQ0FBQ3BELFFBRFAsSUFFQW9ELE1BQU0sQ0FBQ3BELFFBQVAsQ0FBZ0J1RSxLQUZoQixJQUdBbkIsTUFBTSxDQUFDZSxNQUhQLElBSUFmLE1BQU0sQ0FBQ2UsTUFBUCxDQUFjSyxXQUxoQixFQU1FO1lBQ0EsTUFBTUMsS0FBSyxHQUFHckIsTUFBTSxDQUFDZSxNQUFQLENBQWNLLFdBQTVCO1lBQ0EsTUFBTUQsS0FBSyxHQUFHbkIsTUFBTSxDQUFDcEQsUUFBUCxDQUFnQnVFLEtBQTlCLENBRkEsQ0FHQTs7WUFDQSxJQUFJQSxLQUFLLEtBQUssZUFBVixJQUE2QkEsS0FBSyxLQUFLLHFCQUEzQyxFQUFrRTtjQUNoRVAsZUFBZSxDQUFDcEYsSUFBaEIsQ0FBcUI2RixLQUFyQjtZQUNELENBTkQsQ0FPQTs7O1lBQ0EsSUFBSUYsS0FBSyxLQUFLLGNBQVYsSUFBNEJBLEtBQUssS0FBSyxnQkFBMUMsRUFBNEQ7Y0FDMURQLGVBQWUsQ0FBQ3BGLElBQWhCLENBQXFCNkYsS0FBckI7WUFDRDtVQUNGOztVQUNEUCxJQUFJLENBQUNILFNBQUw7UUFDRDs7UUFDRCxPQUFPRyxJQUFQO01BQ0QsQ0F4Q0QsRUF3Q0c5RSxNQXhDSDtJQXlDRDs7SUFFRGdELGNBQUEsQ0FBT2tCLE9BQVAsQ0FDRyxlQUFjL0QsUUFBUyxzQ0FEMUIsRUFFRUgsTUFBTSxDQUFDK0QsT0FGVCxFQUdFL0QsTUFBTSxDQUFDMkUsU0FIVDs7SUFLQTNCLGNBQUEsQ0FBT2tCLE9BQVAsQ0FBZ0IsZUFBYy9ELFFBQVMsaUJBQXZDLEVBQXlEO01BQ3ZEeUU7SUFEdUQsQ0FBekQ7O0lBR0EsQ0FBQyxTQUFELEVBQVksV0FBWixFQUF5QlUsT0FBekIsQ0FBaUN6RyxHQUFHLElBQUk7TUFDdEMsSUFBSW1CLE1BQU0sQ0FBQ25CLEdBQUQsQ0FBTixHQUFjLENBQWxCLEVBQXFCO1FBQ25CbUIsTUFBTSxDQUFDbkIsR0FBRCxDQUFOLEdBQWM7VUFDWkUsSUFBSSxFQUFFLFdBRE07VUFFWkQsTUFBTSxFQUFFa0IsTUFBTSxDQUFDbkIsR0FBRDtRQUZGLENBQWQ7TUFJRCxDQUxELE1BS087UUFDTCxPQUFPbUIsTUFBTSxDQUFDbkIsR0FBRCxDQUFiO01BQ0Q7SUFDRixDQVREOztJQVdBLElBQUkrRixlQUFlLENBQUN4RixNQUFoQixHQUF5QixDQUF6QixJQUE4Qm1GLG9CQUFsQyxFQUF3RDtNQUN0RHZCLGNBQUEsQ0FBT3VDLElBQVAsQ0FBYSw2QkFBNEJYLGVBQWUsQ0FBQ3hGLE1BQU8saUJBQWhFOztNQUNBTyxRQUFRLENBQUNLLE1BQVQsQ0FDRSxlQURGLEVBRUU7UUFBRW9GLFdBQVcsRUFBRTtVQUFFSSxHQUFHLEVBQUVaO1FBQVA7TUFBZixDQUZGLEVBR0U7UUFBRVEsV0FBVyxFQUFFO1VBQUVyRyxJQUFJLEVBQUU7UUFBUjtNQUFmLENBSEYsRUFJRTtRQUNFMEcsR0FBRyxFQUFFekQsU0FEUDtRQUVFMEQsSUFBSSxFQUFFO01BRlIsQ0FKRjtJQVNEOztJQUNEL0csV0FBVyxDQUFDcUIsTUFBRCxFQUFTLE9BQVQsRUFBa0IsQ0FBQyxDQUFuQixDQUFYO0lBQ0FBLE1BQU0sQ0FBQ3VCLE1BQVAsR0FBZ0IsU0FBaEI7SUFFQSxPQUFPTixPQUFPLENBQUNqQixNQUFSLENBQWU7TUFBRUc7SUFBRixDQUFmLEVBQTZCSCxNQUE3QixFQUFxQ0gsSUFBckMsQ0FBMEM4RixHQUFHLElBQUk7TUFDdEQsSUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUN4QixLQUFKLEtBQWMsQ0FBekIsRUFBNEI7UUFDMUIsT0FBTyxLQUFLeUIsUUFBTCxFQUFQO01BQ0Q7SUFDRixDQUpNLENBQVA7RUFLRCxDQTlGRDs7RUFnR0EsTUFBTUEsUUFBUSxHQUFHLFlBQVk7SUFDM0IsT0FBTzNFLE9BQU8sQ0FBQ2pCLE1BQVIsQ0FDTDtNQUFFRztJQUFGLENBREssRUFFTDtNQUNFb0IsTUFBTSxFQUFFLFdBRFY7TUFFRTRDLEtBQUssRUFBRTtRQUFFcEYsSUFBSSxFQUFFO01BQVI7SUFGVCxDQUZLLENBQVA7RUFPRCxDQVJEOztFQVVBLE1BQU04RyxJQUFJLEdBQUcsVUFBVUMsR0FBVixFQUFlO0lBQzFCLElBQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO01BQzNCQSxHQUFHLEdBQUc7UUFBRWxFLE9BQU8sRUFBRWtFO01BQVgsQ0FBTjtJQUNEOztJQUNELE1BQU05RixNQUFNLEdBQUc7TUFDYitGLFlBQVksRUFBRUQsR0FERDtNQUVidkUsTUFBTSxFQUFFO0lBRkssQ0FBZjtJQUlBLE9BQU9OLE9BQU8sQ0FBQ2pCLE1BQVIsQ0FBZTtNQUFFRztJQUFGLENBQWYsRUFBNkJILE1BQTdCLENBQVA7RUFDRCxDQVREOztFQVdBLE1BQU1nRyxJQUFJLEdBQUc7SUFDWDFELFVBRFc7SUFFWHBCLFVBRlc7SUFHWGtELFNBSFc7SUFJWHdCLFFBSlc7SUFLWEM7RUFMVyxDQUFiLENBMUwwRCxDQWtNMUQ7O0VBQ0F6RixNQUFNLENBQUM2RixjQUFQLENBQXNCRCxJQUF0QixFQUE0QixVQUE1QixFQUF3QztJQUN0Q0UsR0FBRyxFQUFFLE1BQU0vRjtFQUQyQixDQUF4QztFQUlBLE9BQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjMkYsSUFBZCxDQUFQO0FBQ0QifQ==