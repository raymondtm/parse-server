"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = exports.getUserFromSessionToken = void 0;

var _graphql = require("graphql");

var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));

var _node = _interopRequireDefault(require("parse/node"));

var _rest = _interopRequireDefault(require("../../rest"));

var _parseClassTypes = require("./parseClassTypes");

var _Auth = require("../../Auth");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getUserFromSessionToken = async (context, queryInfo, keysPrefix, userId) => {
  const {
    info,
    config
  } = context;

  if (!info || !info.sessionToken) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }

  const sessionToken = info.sessionToken;
  const selectedFields = (0, _graphqlListFields.default)(queryInfo).filter(field => field.startsWith(keysPrefix)).map(field => field.replace(keysPrefix, ''));
  const keysAndInclude = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
  const {
    keys
  } = keysAndInclude;
  let {
    include
  } = keysAndInclude;

  if (userId && !keys && !include) {
    return {
      sessionToken
    };
  } else if (keys && !include) {
    include = 'user';
  }

  if (userId) {
    // We need to re create the auth context
    // to avoid security breach if userId is provided
    context.auth = new _Auth.Auth({
      config,
      isMaster: context.auth.isMaster,
      user: {
        id: userId
      }
    });
  }

  const options = {};

  if (keys) {
    options.keys = keys.split(',').map(key => `${key}`).join(',');
  }

  if (include) {
    options.include = include.split(',').map(included => `${included}`).join(',');
  }

  const response = await _rest.default.find(config, context.auth, '_User', // Get the user it self from auth object
  {
    objectId: context.auth.user.id
  }, options, info.clientVersion, info.context);

  if (!response.results || response.results.length == 0) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  } else {
    const user = response.results[0];
    return {
      sessionToken,
      user
    };
  }
};

exports.getUserFromSessionToken = getUserFromSessionToken;

const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }

  parseGraphQLSchema.addGraphQLQuery('viewer', {
    description: 'The viewer query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),

    async resolve(_source, _args, context, queryInfo) {
      try {
        return await getUserFromSessionToken(context, queryInfo, 'user.', false);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  }, true, true);
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRVc2VyRnJvbVNlc3Npb25Ub2tlbiIsImNvbnRleHQiLCJxdWVyeUluZm8iLCJrZXlzUHJlZml4IiwidXNlcklkIiwiaW5mbyIsImNvbmZpZyIsInNlc3Npb25Ub2tlbiIsIlBhcnNlIiwiRXJyb3IiLCJJTlZBTElEX1NFU1NJT05fVE9LRU4iLCJzZWxlY3RlZEZpZWxkcyIsImdldEZpZWxkTmFtZXMiLCJmaWx0ZXIiLCJmaWVsZCIsInN0YXJ0c1dpdGgiLCJtYXAiLCJyZXBsYWNlIiwia2V5c0FuZEluY2x1ZGUiLCJleHRyYWN0S2V5c0FuZEluY2x1ZGUiLCJrZXlzIiwiaW5jbHVkZSIsImF1dGgiLCJBdXRoIiwiaXNNYXN0ZXIiLCJ1c2VyIiwiaWQiLCJvcHRpb25zIiwic3BsaXQiLCJrZXkiLCJqb2luIiwiaW5jbHVkZWQiLCJyZXNwb25zZSIsInJlc3QiLCJmaW5kIiwib2JqZWN0SWQiLCJjbGllbnRWZXJzaW9uIiwicmVzdWx0cyIsImxlbmd0aCIsImxvYWQiLCJwYXJzZUdyYXBoUUxTY2hlbWEiLCJpc1VzZXJzQ2xhc3NEaXNhYmxlZCIsImFkZEdyYXBoUUxRdWVyeSIsImRlc2NyaXB0aW9uIiwidHlwZSIsIkdyYXBoUUxOb25OdWxsIiwidmlld2VyVHlwZSIsInJlc29sdmUiLCJfc291cmNlIiwiX2FyZ3MiLCJlIiwiaGFuZGxlRXJyb3IiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvR3JhcGhRTC9sb2FkZXJzL3VzZXJzUXVlcmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMTm9uTnVsbCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IGdldEZpZWxkTmFtZXMgZnJvbSAnZ3JhcGhxbC1saXN0LWZpZWxkcyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgcmVzdCBmcm9tICcuLi8uLi9yZXN0JztcbmltcG9ydCB7IGV4dHJhY3RLZXlzQW5kSW5jbHVkZSB9IGZyb20gJy4vcGFyc2VDbGFzc1R5cGVzJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9BdXRoJztcblxuY29uc3QgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4gPSBhc3luYyAoY29udGV4dCwgcXVlcnlJbmZvLCBrZXlzUHJlZml4LCB1c2VySWQpID0+IHtcbiAgY29uc3QgeyBpbmZvLCBjb25maWcgfSA9IGNvbnRleHQ7XG4gIGlmICghaW5mbyB8fCAhaW5mby5zZXNzaW9uVG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnSW52YWxpZCBzZXNzaW9uIHRva2VuJyk7XG4gIH1cbiAgY29uc3Qgc2Vzc2lvblRva2VuID0gaW5mby5zZXNzaW9uVG9rZW47XG4gIGNvbnN0IHNlbGVjdGVkRmllbGRzID0gZ2V0RmllbGROYW1lcyhxdWVyeUluZm8pXG4gICAgLmZpbHRlcihmaWVsZCA9PiBmaWVsZC5zdGFydHNXaXRoKGtleXNQcmVmaXgpKVxuICAgIC5tYXAoZmllbGQgPT4gZmllbGQucmVwbGFjZShrZXlzUHJlZml4LCAnJykpO1xuXG4gIGNvbnN0IGtleXNBbmRJbmNsdWRlID0gZXh0cmFjdEtleXNBbmRJbmNsdWRlKHNlbGVjdGVkRmllbGRzKTtcbiAgY29uc3QgeyBrZXlzIH0gPSBrZXlzQW5kSW5jbHVkZTtcbiAgbGV0IHsgaW5jbHVkZSB9ID0ga2V5c0FuZEluY2x1ZGU7XG5cbiAgaWYgKHVzZXJJZCAmJiAha2V5cyAmJiAhaW5jbHVkZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgfTtcbiAgfSBlbHNlIGlmIChrZXlzICYmICFpbmNsdWRlKSB7XG4gICAgaW5jbHVkZSA9ICd1c2VyJztcbiAgfVxuXG4gIGlmICh1c2VySWQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIHJlIGNyZWF0ZSB0aGUgYXV0aCBjb250ZXh0XG4gICAgLy8gdG8gYXZvaWQgc2VjdXJpdHkgYnJlYWNoIGlmIHVzZXJJZCBpcyBwcm92aWRlZFxuICAgIGNvbnRleHQuYXV0aCA9IG5ldyBBdXRoKHtcbiAgICAgIGNvbmZpZyxcbiAgICAgIGlzTWFzdGVyOiBjb250ZXh0LmF1dGguaXNNYXN0ZXIsXG4gICAgICB1c2VyOiB7IGlkOiB1c2VySWQgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcbiAgaWYgKGtleXMpIHtcbiAgICBvcHRpb25zLmtleXMgPSBrZXlzXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG4gIGlmIChpbmNsdWRlKSB7XG4gICAgb3B0aW9ucy5pbmNsdWRlID0gaW5jbHVkZVxuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoaW5jbHVkZWQgPT4gYCR7aW5jbHVkZWR9YClcbiAgICAgIC5qb2luKCcsJyk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3QuZmluZChcbiAgICBjb25maWcsXG4gICAgY29udGV4dC5hdXRoLFxuICAgICdfVXNlcicsXG4gICAgLy8gR2V0IHRoZSB1c2VyIGl0IHNlbGYgZnJvbSBhdXRoIG9iamVjdFxuICAgIHsgb2JqZWN0SWQ6IGNvbnRleHQuYXV0aC51c2VyLmlkIH0sXG4gICAgb3B0aW9ucyxcbiAgICBpbmZvLmNsaWVudFZlcnNpb24sXG4gICAgaW5mby5jb250ZXh0XG4gICk7XG4gIGlmICghcmVzcG9uc2UucmVzdWx0cyB8fCByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTiwgJ0ludmFsaWQgc2Vzc2lvbiB0b2tlbicpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHVzZXIgPSByZXNwb25zZS5yZXN1bHRzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgICB1c2VyLFxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IGxvYWQgPSBwYXJzZUdyYXBoUUxTY2hlbWEgPT4ge1xuICBpZiAocGFyc2VHcmFwaFFMU2NoZW1hLmlzVXNlcnNDbGFzc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyc2VHcmFwaFFMU2NoZW1hLmFkZEdyYXBoUUxRdWVyeShcbiAgICAndmlld2VyJyxcbiAgICB7XG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSB2aWV3ZXIgcXVlcnkgY2FuIGJlIHVzZWQgdG8gcmV0dXJuIHRoZSBjdXJyZW50IHVzZXIgZGF0YS4nLFxuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKHBhcnNlR3JhcGhRTFNjaGVtYS52aWV3ZXJUeXBlKSxcbiAgICAgIGFzeW5jIHJlc29sdmUoX3NvdXJjZSwgX2FyZ3MsIGNvbnRleHQsIHF1ZXJ5SW5mbykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRVc2VyRnJvbVNlc3Npb25Ub2tlbihjb250ZXh0LCBxdWVyeUluZm8sICd1c2VyLicsIGZhbHNlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHBhcnNlR3JhcGhRTFNjaGVtYS5oYW5kbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIHRydWUsXG4gICAgdHJ1ZVxuICApO1xufTtcblxuZXhwb3J0IHsgbG9hZCwgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4gfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsdUJBQXVCLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsU0FBaEIsRUFBMkJDLFVBQTNCLEVBQXVDQyxNQUF2QyxLQUFrRDtFQUNoRixNQUFNO0lBQUVDLElBQUY7SUFBUUM7RUFBUixJQUFtQkwsT0FBekI7O0VBQ0EsSUFBSSxDQUFDSSxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRSxZQUFuQixFQUFpQztJQUMv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