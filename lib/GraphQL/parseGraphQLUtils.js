"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enforceMasterKeyAccess = enforceMasterKeyAccess;
exports.getParseClassMutationConfig = exports.extractKeysAndInclude = void 0;
exports.toGraphQLError = toGraphQLError;

var _node = _interopRequireDefault(require("parse/node"));

var _apolloServerCore = require("apollo-server-core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function enforceMasterKeyAccess(auth) {
  if (!auth.isMaster) {
    throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN, 'unauthorized: master key is required');
  }
}

function toGraphQLError(error) {
  let code, message;

  if (error instanceof _node.default.Error) {
    code = error.code;
    message = error.message;
  } else {
    code = _node.default.Error.INTERNAL_SERVER_ERROR;
    message = 'Internal server error';
  }

  return new _apolloServerCore.ApolloError(message, code);
}

const extractKeysAndInclude = selectedFields => {
  selectedFields = selectedFields.filter(field => !field.includes('__typename')); // Handles "id" field for both current and included objects

  selectedFields = selectedFields.map(field => {
    if (field === 'id') return 'objectId';
    return field.endsWith('.id') ? `${field.substring(0, field.lastIndexOf('.id'))}.objectId` : field;
  });
  let keys = undefined;
  let include = undefined;

  if (selectedFields.length > 0) {
    keys = [...new Set(selectedFields)].join(','); // We can use this shortcut since optimization is handled
    // later on RestQuery, avoid overhead here.

    include = keys;
  }

  return {
    // If authData is detected keys will not work properly
    // since authData has a special storage behavior
    // so we need to skip keys currently
    keys: keys && keys.indexOf('authData') === -1 ? keys : undefined,
    include
  };
};

exports.extractKeysAndInclude = extractKeysAndInclude;

const getParseClassMutationConfig = function (parseClassConfig) {
  return parseClassConfig && parseClassConfig.mutation || {};
};

exports.getParseClassMutationConfig = getParseClassMutationConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbmZvcmNlTWFzdGVyS2V5QWNjZXNzIiwiYXV0aCIsImlzTWFzdGVyIiwiUGFyc2UiLCJFcnJvciIsIk9QRVJBVElPTl9GT1JCSURERU4iLCJ0b0dyYXBoUUxFcnJvciIsImVycm9yIiwiY29kZSIsIm1lc3NhZ2UiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJBcG9sbG9FcnJvciIsImV4dHJhY3RLZXlzQW5kSW5jbHVkZSIsInNlbGVjdGVkRmllbGRzIiwiZmlsdGVyIiwiZmllbGQiLCJpbmNsdWRlcyIsIm1hcCIsImVuZHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJrZXlzIiwidW5kZWZpbmVkIiwiaW5jbHVkZSIsImxlbmd0aCIsIlNldCIsImpvaW4iLCJpbmRleE9mIiwiZ2V0UGFyc2VDbGFzc011dGF0aW9uQ29uZmlnIiwicGFyc2VDbGFzc0NvbmZpZyIsIm11dGF0aW9uIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0dyYXBoUUwvcGFyc2VHcmFwaFFMVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHsgQXBvbGxvRXJyb3IgfSBmcm9tICdhcG9sbG8tc2VydmVyLWNvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5mb3JjZU1hc3RlcktleUFjY2VzcyhhdXRoKSB7XG4gIGlmICghYXV0aC5pc01hc3Rlcikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PUEVSQVRJT05fRk9SQklEREVOLCAndW5hdXRob3JpemVkOiBtYXN0ZXIga2V5IGlzIHJlcXVpcmVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvR3JhcGhRTEVycm9yKGVycm9yKSB7XG4gIGxldCBjb2RlLCBtZXNzYWdlO1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQYXJzZS5FcnJvcikge1xuICAgIGNvZGUgPSBlcnJvci5jb2RlO1xuICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIGNvZGUgPSBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gICAgbWVzc2FnZSA9ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InO1xuICB9XG4gIHJldHVybiBuZXcgQXBvbGxvRXJyb3IobWVzc2FnZSwgY29kZSk7XG59XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0S2V5c0FuZEluY2x1ZGUgPSBzZWxlY3RlZEZpZWxkcyA9PiB7XG4gIHNlbGVjdGVkRmllbGRzID0gc2VsZWN0ZWRGaWVsZHMuZmlsdGVyKGZpZWxkID0+ICFmaWVsZC5pbmNsdWRlcygnX190eXBlbmFtZScpKTtcbiAgLy8gSGFuZGxlcyBcImlkXCIgZmllbGQgZm9yIGJvdGggY3VycmVudCBhbmQgaW5jbHVkZWQgb2JqZWN0c1xuICBzZWxlY3RlZEZpZWxkcyA9IHNlbGVjdGVkRmllbGRzLm1hcChmaWVsZCA9PiB7XG4gICAgaWYgKGZpZWxkID09PSAnaWQnKSByZXR1cm4gJ29iamVjdElkJztcbiAgICByZXR1cm4gZmllbGQuZW5kc1dpdGgoJy5pZCcpXG4gICAgICA/IGAke2ZpZWxkLnN1YnN0cmluZygwLCBmaWVsZC5sYXN0SW5kZXhPZignLmlkJykpfS5vYmplY3RJZGBcbiAgICAgIDogZmllbGQ7XG4gIH0pO1xuICBsZXQga2V5cyA9IHVuZGVmaW5lZDtcbiAgbGV0IGluY2x1ZGUgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKHNlbGVjdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICBrZXlzID0gWy4uLm5ldyBTZXQoc2VsZWN0ZWRGaWVsZHMpXS5qb2luKCcsJyk7XG4gICAgLy8gV2UgY2FuIHVzZSB0aGlzIHNob3J0Y3V0IHNpbmNlIG9wdGltaXphdGlvbiBpcyBoYW5kbGVkXG4gICAgLy8gbGF0ZXIgb24gUmVzdFF1ZXJ5LCBhdm9pZCBvdmVyaGVhZCBoZXJlLlxuICAgIGluY2x1ZGUgPSBrZXlzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBJZiBhdXRoRGF0YSBpcyBkZXRlY3RlZCBrZXlzIHdpbGwgbm90IHdvcmsgcHJvcGVybHlcbiAgICAvLyBzaW5jZSBhdXRoRGF0YSBoYXMgYSBzcGVjaWFsIHN0b3JhZ2UgYmVoYXZpb3JcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHNraXAga2V5cyBjdXJyZW50bHlcbiAgICBrZXlzOiBrZXlzICYmIGtleXMuaW5kZXhPZignYXV0aERhdGEnKSA9PT0gLTEgPyBrZXlzIDogdW5kZWZpbmVkLFxuICAgIGluY2x1ZGUsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFyc2VDbGFzc011dGF0aW9uQ29uZmlnID0gZnVuY3Rpb24gKHBhcnNlQ2xhc3NDb25maWcpIHtcbiAgcmV0dXJuIChwYXJzZUNsYXNzQ29uZmlnICYmIHBhcnNlQ2xhc3NDb25maWcubXV0YXRpb24pIHx8IHt9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFTyxTQUFTQSxzQkFBVCxDQUFnQ0MsSUFBaEMsRUFBc0M7RUFDM0MsSUFBSSxDQUFDQSxJQUFJLENBQUNDLFFBQVYsRUFBb0I7SUFDbEIsTUFBTSxJQUFJQyxhQUFBLENBQU1DLEtBQVYsQ0FBZ0JELGFBQUEsQ0FBTUMsS0FBTixDQUFZQyxtQkFBNUIsRUFBaUQsc0NBQWpELENBQU47RUFDRDtBQUNGOztBQUVNLFNBQVNDLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0VBQ3BDLElBQUlDLElBQUosRUFBVUMsT0FBVjs7RUFDQSxJQUFJRixLQUFLLFlBQVlKLGFBQUEsQ0FBTUMsS0FBM0IsRUFBa0M7SUFDaENJLElBQUksR0FBR0QsS0FBSyxDQUFDQyxJQUFiO0lBQ0FDLE9BQU8sR0FBR0YsS0FBSyxDQUFDRSxPQUFoQjtFQUNELENBSEQsTUFHTztJQUNMRCxJQUFJLEdBQUdMLGFBQUEsQ0FBTUMsS0FBTixDQUFZTSxxQkFBbkI7SUFDQUQsT0FBTyxHQUFHLHVCQUFWO0VBQ0Q7O0VBQ0QsT0FBTyxJQUFJRSw2QkFBSixDQUFnQkYsT0FBaEIsRUFBeUJELElBQXpCLENBQVA7QUFDRDs7QUFFTSxNQUFNSSxxQkFBcUIsR0FBR0MsY0FBYyxJQUFJO0VBQ3JEQSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQkMsS0FBSyxJQUFJLENBQUNBLEtBQUssQ0FBQ0MsUUFBTixDQUFlLFlBQWYsQ0FBaEMsQ0FBakIsQ0FEcUQsQ0FFckQ7O0VBQ0FILGNBQWMsR0FBR0EsY0FBYyxDQUFDSSxHQUFmLENBQW1CRixLQUFLLElBQUk7SUFDM0MsSUFBSUEsS0FBSyxLQUFLLElBQWQsRUFBb0IsT0FBTyxVQUFQO0lBQ3BCLE9BQU9BLEtBQUssQ0FBQ0csUUFBTixDQUFlLEtBQWYsSUFDRixHQUFFSCxLQUFLLENBQUNJLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJKLEtBQUssQ0FBQ0ssV0FBTixDQUFrQixLQUFsQixDQUFuQixDQUE2QyxXQUQ3QyxHQUVITCxLQUZKO0VBR0QsQ0FMZ0IsQ0FBakI7RUFNQSxJQUFJTSxJQUFJLEdBQUdDLFNBQVg7RUFDQSxJQUFJQyxPQUFPLEdBQUdELFNBQWQ7O0VBRUEsSUFBSVQsY0FBYyxDQUFDVyxNQUFmLEdBQXdCLENBQTVCLEVBQStCO0lBQzdCSCxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUlJLEdBQUosQ0FBUVosY0FBUixDQUFKLEVBQTZCYSxJQUE3QixDQUFrQyxHQUFsQyxDQUFQLENBRDZCLENBRTdCO0lBQ0E7O0lBQ0FILE9BQU8sR0FBR0YsSUFBVjtFQUNEOztFQUVELE9BQU87SUFDTDtJQUNBO0lBQ0E7SUFDQUEsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUksQ0FBQ00sT0FBTCxDQUFhLFVBQWIsTUFBNkIsQ0FBQyxDQUF0QyxHQUEwQ04sSUFBMUMsR0FBaURDLFNBSmxEO0lBS0xDO0VBTEssQ0FBUDtBQU9ELENBMUJNOzs7O0FBNEJBLE1BQU1LLDJCQUEyQixHQUFHLFVBQVVDLGdCQUFWLEVBQTRCO0VBQ3JFLE9BQVFBLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ0MsUUFBdEMsSUFBbUQsRUFBMUQ7QUFDRCxDQUZNIn0=